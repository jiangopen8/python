




APIDoCS






Welcome

2025/2/2701:22                                                                                               Helius Docs


What is Helius?
Solana's Leading RPC&API Platform

Helius is an enterprise-grade Solana development platform offering best-in-class RPCs, APls,data streaming tools,and 24/7 customer support.Helius also runs the top Solana
validator and offers both individual stakers and institutional staking partners 0%fees and 100%MEV   rewards.



Solana RPCs 

To read data from and write data to Solana,applications require an RPC node.Our globally distributed fleet of RPCs are  powered  by  top-of-the-line  hardware,offer  99.99%uptime    SLAs,and are trusted by the largest wallets and applications on Solana.

We offer two types of RPC nodes:

1.  Shared RPC nodes-rate-limited  plans  ideal for  new projects that have moderate to high request loads
2.  Dedicated RPC nodes-ideal  for  large-scale  applications that  require  low  latencies with no rate limits

Our battle-tested nodes are globally distributed across  New York,Ashburn,Chicago,
Vancouver,Los Angeles,Singapore,Tokyo,Frankfurt,and the UK.For Shared RPC nodes, we automatically send your requests to the closest node,guaranteeing the quickest and   most  efficient  routing.


Staked Connections

Staked connections can improve transaction landing rates.As we run the largest validator on Solana,you can send transactions through our staked connections.

We offer two types of staked connections:

1.  Shared staked connections-available through  all of our paid standard  plans

2025/2/2701:22                                                                                               Helius Docs


2.  Dedicated  staked  connections-contact us to add on to any Helius plan

Dedicated staked connections are ideal for trading frms and enterprises requiring guaranteed bandwidth for sendTransaction   requests.Pricing is based on your   transactions per second(TPS).



Data Services

Get the Solana data you need,how you need it.Whether you're streaming real-time
updates or automating on-chain event handling,we've got you covered with tools built for speed,scale,and simplicity.


Data Streaming

We offer a variety of methods for streaming Solana data to your databases.

Geyser

Geyser is the fastest way to stream data.Using the Yellowstone Geyser plugin,you can subscribe to updates on blocks,slots,transactions,and accounts through our dedicated
RPC nodes.Ideal for low-latency use cases requiring real-time,high-throughput data access.

¡ñ Enhanced Websockets

We provide Enhanced Websocket methods for subscribing to transaction and account
updates.This feature is in beta and is only for business and professional plans.Suitable for non-latency critical real-time data needs in client-side applications.Not recommended for critical backend operations or applications requiring guaranteed message delivery.

¡ñ Standard Websockets

Websockets allow persistent,two-way communication between a client and a server,
enabling real-time data streams.Solana Websockets are available for Developer,Business, and Professional plans.Websockets are afragile connection type and can drop off

2025/2/2701:22                                                                             Helius Docs


unexpectedly.Implement  a  robust  reconnection  logic  or  consider  using  Geyser  for  more reliable  data  streaming.


Event Notifications

¡ñ Webhooks

Webhooks  notify  you  of  onchain  events  in  real-time.With  support  for  over  70  transaction types ,you  can  automate  your  app's  interactions  with  Solana  without  complex  smart
contract  parsers.A  single  webhook  can  support  up  to   100,000  addresses.deal  for
automating  responses  to specific  on-chain events and  handling  large  address  sets.Not recommended  for  applications   requiring  sub-second   latency  or  those  with  frequently  changing address lists.


Solana APls 

Helius  offers  various  APls  for  interacting  with  NFTs,compressed  NFTs,and  tokens, calculating  priority  fees,and  parsing  transactions.


Priority Fee API

The Priority  Fee APl  enables you to  add  optional fees to your transactions to  incentivize
block  producers  (leaders)to  include  your  transaction  in  the  next  block.This  APl  is  useful  for improving  transaction   landing  rates,especially  during   periods  of  high   network  congestion.


Enhanced Transaction APls

The Enhanced  Transactions  APl provides  enriched,descriptive     context  for  Solana
transactions.Instead  of  opaque   bytes,you  get   human-readable   responses  for  transactions such  as  NFT  listings,DEX  swaps,DeFi  loans,DAO  votes,and  more.


Solana DASAPl and Compression

2025/2/2701:22                                                                                               Helius Docs


The Digital Asset Standard(DAS)is a unifed interface for Solana NFTs and tokens.Helius DASAPl  is Solana's most complete,and performant NFT and token API.The DASAPl also supports indexing and APl methods for interacting with compressed NFTs.


Photon APl and ZK Compression

ZK Compression  is ageneralized compression framework that allows developers to store  data on Solana at a fraction of the cost.Developers can use the Photon  APl  to easily access this compressed data.

2025/2/2701:22                                                                                               Helius Docs


Pricing&Rate limits
Flexible pricing for all your needs.Switch plans or cancel at anytime.Start in under 5 seconds.



Standard Plans ¿Ú

Access a shared RPCnode fleet across New York,Ashburn,Chicago,Vancouver,Los
Angeles,Singapore,Tokyo,Frankfurt,and  the  UK,automatically  routing   requests  to  the nearest node.


Features:

¡ñ  RPC calls
¡ñ   Webhooks
¡ñ  Standard  WebSockets
¡¤Enhanced  WebSockets(beta)-availablefor  Business  and  Professional  plans  only
¡ñ    DASAPls
¡ñ Enhanced Transactions API
Priority   Fee   API

¡ñ Token Balance API
¡ñ  Photon  Methods  (ZK  Compression)
¡¤    Shared Staked Connections  for   sendTransaction
Mint       API(deprecated)

Each plan has a set amount of credits and rate limits for different calls.

Free                     Developer               Business                  Professio
al
$0/mo	$49/mo	$499/mo	$999/mo


2025/2/2701:22                                                                                               Helius Docs



500k Credits	
10M Credits	
100M Credits	200M
Credits

10 RPC requests/s*	
50 RPC requests/s*	
200 RPC requests/s*	500 RPC
requests/s

2APl requests/s(DAS& Enhanced)	
10APl requests/s(DAS &Enhanced)	
50APl requests/s (DAS& Enhanced)	100API
requests/s (DAS&
Enhanced)
1API Key	3API Keys	5API Keys	15API Key
1 User	2 Users	5 Users	10 Users

1 Webhook	
5 Webhooks	
25 Webhooks	50
Webhooks

Standard Websockets	
Standard Websockets	
Standard+Enhanced Websockets	Standard+ Enhanced Websocke

Community support	
Chat Support	
Priority Chat Support	Slack
T1-   -

*If you  are  on  a  legacy(old)plan,please  refer  to  the 'Legacy  Plan  Limits'section   below   for applicable   details.

*See  rate  limit  exceptions  below.


Rate Limit Exceptions*

Type                              Free              Developer         Business           Prc
al

sendTransaction	
1 call/sec	
5 calls/sec	
50 calls/sec	
¡¡100 calls
		5 calls/sec	25 calls/sec	50 calls/sec	75
	getProgramAccounts					
					



Photon Limits

2025/2/2701:22                                                                                               Helius Docs


Type                     Free                 Developer             Business              Pi
al

Photon	
2calls/sec	
10 calls/sec	
50 calls/sec	¡¡10 cal
getValidityProof	1 call/sec	5 call/sec	10 call/sec	20




Credits

A clear breakdown of the credit costs in our Standard plans.

¡ñ Standard RPC Calls:1 credit per call ¡£ Exceptions:
¡¡	getProgramAccounts  :10   credits Archival Calls:10 credits each
getTransaction
¡ñ   getBlock
	getBlocks
¡ñ   getInflationReward
	getSignaturesForAddress
¡ñ   getBlockTime

Send Transaction:
¡ñ Via    https://mainnet.helius-rpc.com:1credit
¡¡¡ñ Via    https://staked.helius-rpc.com:50  credits Priority  Fee API:1credit
¡ñ DAS Calls:10 credits each
o    getAsset
o     getAssetProof
o     getAssetsByOwner
o     getAssetsByAuthority

2025/2/2701:22                                                                                                               Helius Docs



o     getAssetsByCreator
o    getAssetsByGroup
o     searchAssets
o     getSignaturesForAsset
o     getTokenAccounts
	
o     getNFTEditions
¡ñ Photon Calls:
o  Standard  Calls:10  credits
¡£  getValidityProofs  :100 credits(due to higher computation)
¡¤   Webhook:
o   Webhook   Pushes:1credit
o Webhook  Edits  via APl:100  credits
¡ñ Enhanced Transactions APl and Mint API:100 credits  per call


Extra Credits

If you exhaust your credits within a billing cycle,you can purchase additional credits:

¡¤   Crypto    Plans-purchase additional  prepaid credits directly from the dashboard
¡¡¡¤   Card  Payment  Plans-enable autoscaling in the Project Settings on the dashboard The rates for additional credits vary depending on your plan:

Developer                        Business                          Professional
$5/million extra credits	$5/million extra credits	$4/million extra credits

If you regularly incur overages,consider upgrading your plan

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


If you need more than 200M credits,contact  us to discuss enterprise plans.


Enterprise Plans 

Enterprise plans are ideal for large teams that need personalized rate limits and more
credits than the professional plan offers.Enterprise customers receive discounted pricing for high credit volumes and longer commitments.You can choose your support level with  service level agreements (SLAs),uptime guarantees,usage alerts,and direct access to our  engineering team to help you optimize your setup.

¡¡¡¡¡¡¡¡


Autoscaling Limits

¡¡Autoscaling automatically adjusts your credits when you exceed your plan's monthly usage. Additional credits are charged at the end of your billing cycle.Autoscaling is only available   for fiat plans.

Here's how to set up autoscaling:

1.  Sign in to your  account dashboard
2.  Go to  Project Settings
3.Scroll to the  bottom where  it  says"Autoscaling  Limit"   4.Drag the slider to set your preferred autoscale limit     5.Drag the slider all the way to the right to set¡°no limit¡± 6.Click¡°Save    Settings¡±

2025/2/2701:22                                                                                               Helius Docs




Èý Middle

Project  ID
0251ofla-3d21-4095-8045-0feOcbe3785
APIKey Shakerpale
Project   Users
Dashboard
User                                                                                                                    Role
a     Endpoints
&bradyghelusxy                                                                                              
Invite   Users
IrvitesLet:2
Invite users to your project by sharing the project iD.
B  Dedicated  Nodes
Email Address or Walet Address
Emal Address or Solana Wallet Address
Get inwte lnk
Projoct Sottings
Autoscaling Limit
Autoscaling lets you scaio based on usge once you exceed your monthly crect imit

Capmy usag at 84138,000 extra cradts fequvaient toS420.89)
5mw    Sutinge
¢ß Suppert
ÖÐ Documentation

Configure autoscaling limits in the Helius dashboard



Legacy(Deprecated)Plan Limits

Free V3                    Developer V3              Business V3                Performa
ce V3

500k Credits	
10M Credits	
200M Credits	
500M
Credits

10 RPC requests/s*	
50 RPC requests/s*	
150 RPC requests/s*	¡¡500 RPC requests/

2 APl requests/s(DAS& Enhanced)	
10API requests/s (DAS& Enhanced)	
50APl requests/s(DAS& Enhanced)	¡¡100 API requests/ (DAS&
Enhanced
1API Key	10 API Keys	15API Keys	20API Ke

1 Webhook	
3 Webhooks	
10 Webhooks	20
Webhook

Community support (Discord)	
Chat Support(Developer Portal)	
Priority Chat Support (Developer Portal)	Slack
/Telegram
Support


2025/2/2701:22                                                                                     Helius Docs



5gPA calls per second	
25gPA calls per second	
50 gPA calls per second	¡¡75gPA ca per secon

¡¡1 sendTransaction call per second	
10 sendTransaction call per second	
50 sendTransaction call per second	100
¡¡sendTrans tion call p
second

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                                               Helius Docs


Pay with Crypto
Purchasing a Helius Plan with Crypto



Getting        Started        with         Crypto        Payments ¿Ú

Helius allows you to buy plans using USDC.You can secure your subscription injust one
straightforward  transaction-no  hassle.Below,you'll  find  an  easy-to-follow  guide  on  how  to get  started.

¡¡¡¡¡¡
https://dashboard.helius.dev/billing




Purchasinga Plan with Crypto S

1.  Navigate to the Billing Page
Go to https://dashboard.helius.dev/billing   and select the   subscriptionplan that fits your needs(e.g.,Business).Choose either  monthly or annual  billing.
2.  Initiate Crypto Payment
Click Pay with Crypto and connect your preferred wallet.

2025/2/2701:22                                                                                               Helius Docs



3.  Enter Billing Information
Provide your name and billing address.
4.  Authorize Automatic     Withdrawals
By authorizing,you consent to allow automatic deductions of USDC from your wallet at each billing period.
5.  Confirm Payment
Click Pay with USDC and  wait  for  your  transaction  to  process.Onceit's  complete,your new  plan willbe active!

¡¡¡¡¡¡¡¡



Frequently Asked Questions


Iwant to switch between fiat and crypto payments.

Please contact our support team,and they will assist you with changing your payment method.


l paid for a plan,but it hasn't been updated yet in my dashboard.

It can take up to 1 hour for the system to update your plan.If it still doesn't update after that,reach out to our support team.

2025/2/2701:22                                                                                               Helius Docs



How do Icancel my subscription?

You can cancel by going to the Billing  page and clicking the Cancel Subscription button.


What does"Authorize Automatic Withdrawals"mean?

When you authorize automatic withdrawals,you're giving the platform permission to pull     the necessary amount of USDC(on Solana)directly from your wallet whenever a new billing period  starts.This  is  often  referred  to  as  a"subscription"or¡°recurring  payment,"where  you  don't have to manually approve each individual charge.

¡ñ How It Works:
o At the beginning of each billing cycle,the system checks if you have enough USDC in your Solana wallet.
o  If sufficient funds are available,the required amount is automatically deducted to cover the plan's cost.
o If you ever want to stop automatic charges,you can revoke this authorization via your wallet or billing settings.
Why Authorize?
o It saves you from having to manually make a payment every month(or billing period).
¡£It ensures your service continues without interruption,as the payment is handled automatically.
¡ñ Things to Keep in Mind:
¡£ Suffcient Funds:Make sure your wallet has enough USDC ahead of each billing date.
¡£ Revoking Authorization:You can usually disable or revoke this automatic withdrawal at any time if you decide you'd rather pay manually.


How can lmanually pay for my subscription instead of authorizing payments?

2025/2/2701:22                                                                                          Helius Docs


Manual payments are not supported.You must authorize USDCso it can be automatically deducted on billing days.However,you can revoke this authorization after each purchase by following these steps:

1.Go to the Billing page and click Manage Delegate Wallet(this willredirect you to Loop). 2.Select your  plan(e.g.,Developer).
3.Click Edit in the Authorization section.     4.Set the limit to O to revoke authorization.






Solana RPCNodes

2025/2/2701:22                                                                                               Helius Docs



Helius RPCs Overview
Solana's most loved RPC nodes.



What is Solana RPC?

To interact with blockchain data,you must use an RPC node.Here is a brief explainer on
how RPCs on Solana work:
   How Solana RPCs Work                                                                                            >
External link to Helius Blog post about RPC fundamentals.



What makes Helius RPCs Different?

At Helius,we are Solana natives.We've been here since the beginning,and unlike other providers,we focus exclusively on Solana and are dedicated to perfecting the Solana
experience.

We take pride in offering the most well-rounded RPC solution in the ecosystem,ranking in the  top  1%for  performance,pricing,and  consistent  uptime.With  Helius,there  are  no
surprises-just  reliability you  can count on.

Should you face any challenges,our best-in-class 24/7 support team is always here to help, ensuring you stay unblocked and moving forward.



How to use Helius RPCs?

To make standard RPC calls use these endpoints:

¡ñ Mainnet-  [https://mainnet.helius-rpc.com
	
¡ñ Devnet-  [https://devnet.helius-rpc.com

2025/2/2701:22                                                                                               Helius Docs



You can generate an API key from the dashboard  and use it with the provided URL.The generated endpoints are also available in the Endpoints section.

¡¡	Default


RPCs     ¢Ú                                                                                              Mainnet        Devne     t
Sample
ca0185da-alfa-489c-b097-4b3a
API Key:Sample Key	
88 Dashboard
e Endpoints
PAPI Keys  µºWebhooks
8 Dedicated Nodes L Usage
RPC Testing
µçProject Settings	https://mainnet.helius-rpc.com/?api-key=e87bdeb4-078f-413f-9f77-e9e65d5640dd
	
Secure RPC URL ¢Ú
	https://adey-4welsc-fast-mainnet.helius-rpc.com
	
	Staked Connection URL ¢Ú
	https://staked.helius-rpc.com?api-key=e87bdeb4-078f-413f-9f77-e9e65d5640dd                                    Ê¯
	
Standard Websocket URL ¢Ú
	WSs://mainnet.helius-rpc.com/7api-key=e87bdeb4-078f-413f-9f77-e9e65d5640dd
	Geyser Enhanced Websocket URL ¢ß
	wss://atlas-mainnet.helius-rpc.com/?api-key=e87bdeb4-078f-413f-9f77-e9e65d5640dd
	
Shared Eclipse URL
Í¼System Status	
	https://eclipse.helius-rpc.com/                                                                      Ê¯
¢ßSupport
dashboard.helius.dev/endpoints

Our platform offers controls to customize your RPC access patterns-for instance,
restricting requests to specific IPs or domains.These configurations can easily be managed directly in the dashboard.

2025/2/2701:22                                                                                          Helius Docs



RPC Access Control Rules

Allowed Domains ¢Ú edit
No values set


Allowed IPs ¢Ú edit

No values set


Allowed CIDRs ¢Ú  edit
No values set

Configure  RPCAccess  Control  Rules  in  the  Endpoints  section  of  your  dashboard.



Shared RPC Node Locations

Helius provides services through aglobally distributed set of nodes strategically positioned in key locations:New York,Ashburn,Chicago,Vancouver,Los Angeles,Singapore,Tokyo,   Frankfurt,and the UK. Helius automatically directs user requests to the closest node,
guaranteeing the quickest and most efficient routing.



Dedicated Nodes

We offer dedicated private RPC nodes at industry-leading rates.These nodes are ideal for teams seeking an isolated environment with predictable performance and billing.

Extend functionality with advanced Geyser plugin and Archival access.Visit the Helius Dashboard  to effortlessly set up your dedicated node!

2025/2/2701:22                                                                                     Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


Dedicated Nodes
Private Dedicated Nodes optimized for low latency and high performance Get a Dedicated Node in a specificregion with no rate or credit limits.
Perfect  for   latency-sensitive  applications  such  as  data  streaming  or  handling  a  high  volume of  requests,it's  ideal  for  teams  seeking  a  dedicated  environment  with  consistent
performance  and  cost   management.Choose  a  single   node  in  a  specific   location  to  enhance server-to-server   interactions   or   establish   a   node   cluster   for   wide   geographic   distribution.  Enhance  capabilities  using  advanced  Geyser  plugins.


Node Options:

¡ñ   AMDEPYC7443p
¡ñ AMD EPYC7543p(Best for resource-intensive RPC calls) ¡¤AMD EPYC9254(Best for resource-intensive RPC calls)


Access Includes:

¡¤Standard    RPC   and   WebSocket    methods
¡ñ    Premium    support
¡¤Node   clients-Agave(recommended)or   Jito    Labs
¡ñ Geyser          Plugin(Optional)-Yellowstone

¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                                               Helius Docs




Dedicated Fleets 

If your team needs a cluster of multiple Dedicated Nodes or needs to run a fleet of Pythnet nodes, contact our sales team.We'll review your requirements and help you with a custom solution.



How to Order a Dedicated Node

Dedicated Nodes can be ordered directly from the developer  portal on the  Dedicated Nodes  tab.
¡¡¡¡¡¡¡¡
Order a dedicated node from your Helius dashboard


Node Type

The type of node you choose depends on your specifc project requirements.Reviewing
each node's CPU cores and RAM is important to determine which will best support your     workload.Since we don't impose any rate limits,your node's performance will rely entirely on its specifications.



If you plan to make resource-intensive calls(e.g., getProgramAccounts,
getTokenLargestAccounts                         ,getTokenAccountsByDelegate ,
		getTokenAccountsByOwner,getLargestAccounts                     ),the      AMD      EPYC7543pand  AMD EPYC9254 offer similar performance,but the EPYC9254is newer and more efficient.

The AMD EPYC7443p is better if your workload does not require resource-intensive calls.


New   Dedicated   Node

Resource-Intensive RPC Calls
¡õ     Enable     resource-intensive     RPC     calls     ¢Ú
Enabling this option willfiter available node types to those capable of handling resource-intensive operations.



Step O:Choose billing cycle

Monthly Yearly (Save  16%)

Step 1:Choose a type

$1,800/month
AMD EPYC7443p
Optimized for high-performance RPC calls,this  single-tenant  bare  metal    solution features 24 CPU cores and   256GB of RAM.









$2,400/month
AMD EPYC 7543p
Optimized for resource-intensive  RPC
calls,this  single-tenant  bare  metal
solution features 32 CPU cores and 1TB of RAM.








ÂÀÂÀ
AMD EPYC 9254
Optimized for resource-intensive RPC calls,this  single-tenant  bare  metal
solution features 24 CPU cores and 768GB of RAM.



Step 2:Choose a location

=Amsterdam	Netherlands	¡ö    Dublin	hsiond	Newark	United States
Availability:ETA 4-14  days		Availabilty:Not	currently   avallable	Availability:Now	

=   Frankfurt
Availabilty:ETA  4-14  days	
Germany                       Los Angeles
Availabilty:Now	
United States	
Pitsburgh
Availability:ETA4-14   days	
United States
Choose your dedicated node'type and location


Node Location

For   optimal   latency,choose   a   node   closest   to   your   server.Your   node   will   be   deployed   within three   hours   of   payment.

2025/2/2701:22                                                                                     Helius Docs




Node Client

You   can   customize   your    node   by   selecting   the    client   type-either   Agave   or   Jito    Labs(fork of Agave with an additional method     simulateBundle)


Step 3:Choose a Solana client ¢Ú



Solana Labs
Original Solana validator management client,developed by Solana Labs for    efficient network operations.


Jito Labs
Fork of Solana's original client by Jito
Labs,enhances validator rewards and
network efficiency.



Select your dedicated node's client type

¡¡¡¡¡¡¡¡


Geyser Plugin(Optional)

Add optional features like the Yellowstone Geyser Plugin,which supports streaming of slots,blocks,transactions,and account updates.

¡¡¡¡¡¡
Select the Yellowstone gRPC Geyser Plugin(Optional)

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡


Payment Options

You  can  pay  via  fiat   or  crypto(USDC).Once  your   payment   goes  through,your   node  will   be deployed  within  3   hours.

For  billing,fiat  payments  willreceive  a  discount  on  the  next  month's  billfor  the  number  of days  it  took  to  provision  the  node.For  crypto  payments,the  billing  cycle  starts  once  the    node   is   delivered.


Demo


Set Up A Private RPC Node on Solana¡¤Solana Development Tutorials






¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


2025/2/2701:22                                                                                               Helius   Docs


Getting Started with Dedicated Nodes
Dedicated Nodes with Increased Bandwidth and Reduced Latency



Dashboard Overview

Once you have placed an order for a Dedicated Node you will get access to the overview
page which will be your Dedicated Node Hub.This will have all your pending orders and
active Nodes.It can be reached by going to the Dedicated Nodes tab on the main dashboard or by clicking here. You will get an email once your node is ready and the status will change
to Succeeded.

¡¡¡¡¡¡¡¡
Dedicated Nodes Dashboard


Order ID and Host ID

Order ID and Host ID are identifers that can be used when contacting the support team with questions regarding your order(Order  ID)or your node(Host  ID).Think of them as names for your Node.


URL

The URLis your standard Solana RPC URL which can be used to call RPC methods or used as a websocket by changing https to wss.


gRPC URL&gRPC Token

2025/2/2701:22                                                                                               Helius Docs


Your gRPC URLand gRPC Token are used when working with the Geyser Plugin that you chose.There will be code examples further that will explain how to use the gRPC and
stream Solana events with minimal latency.All our dedicated nodes are Shredstream enhanced.


Region

This is where your node is located



Solana version

This is the current version that is running on your node.


Geyser type

This is the Geyser plugin you chose.



Status

Status represents the current state of your node:

¡¤Pending-signifies  a  pending  order  for  your   node ¡¤   Underway-   your node is being set up
¡¤   Succeeded-  your node is fully set up ¡¤   Failed-   your node is down


Node  Deactivated

This indicates if your node is currently suspended.If a payment is missed,your node will be  deactivated automatically.You have a 3-day grace period to reactivate it by completing the payment.

2025/2/2701:22                                                                                               Helius Docs




Action Buttons

There are also 4 action buttons on the right that give you fullcontrol over your node's lifecycle and  performance  monitoring.


1   Update Version

¡¤Lets you update or downgrade your node's version     ¡¤Use this when you want to update to a newer version
¡¤Important to  keep your  node  up-to-date  with  latest features  and  performance  updates



Metrics

¡¤Shows  your  node's  performance
¡¤Track things like your response times,requests per second,success and failure rates ¡¤Monitor health and usage with request success rates and error rates


 Delete Node

¡¤Permanently and immediately removes your node and cancels the subscription
¡ñ This cannot be undone and you will have to order a new Node



Working With Your Node


RPC and Websocket

Each dedicated eode comes with an RPC URL that you can use like in the example below. Here we are using Solana web3.js to call getSlot     using our dedicated  node:

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

This is how you would set up a native websocket connection to stream new slots:

¡¡¡¡¡¡¡¡


Set up your Geyser Plugin

To begin using the Geyser plugin you need to clone the Yellowstone repo:

¡¡¡¡¡¡¡¡


Using the CLI



¡¡¡¡¡¡¡¡

Once complete,you should see the terminal output new slots.Don't forget to replace the URLand Token with your own.

¡¡¡¡¡¡¡¡
Terminal output of new slots.


TypeScript Example

This example streams all Raydium transactions live in JSON format:

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                     Helius   Docs


entry:{},
slots:{ ×Ó£¬
×Ó).catch(console.error),    30000);

await    new    Promise   < void  >((resolve,reject)=>{
stream.on("error",(e)=>{console.error("Stream                       error:",e);reject
stream.on ( "end",resolve);
¡¡¡¡stream.on ( "close" ,resolve); ×Ó);
×Ó£»
main() .catch (console.error);
¡¡¡¡¡¡¡¡
Example output of a partial Raydium transaction



Best Practices


Managing Node Load

While nodes don't have strict usage limits,they are bound by hardware constraints.A balanced   workload    helps    maintain    optimal    performance    and    node    liveliness.

2025/2/2701:22                                                                                               Helius Docs


¡ñ Avoid mixing heavy account-basedcalls(e.g. getProgramAccounts,
getTokenAccountsByOwner,  etc.)with gRPC usage on the same node.
¡£ It's best to move heavy account-based calls to a shared plan since we have a custom indexer  that makes those calls much faster.
¡ñ Monitor your node's metrics to understand its performance based on response times, successful request %,and error counts.
¡¤Consider  distributing  intensive  workloads  across  multiple  nodes  ina  dedicated  fleet

¡¡¡¡¡¡¡¡


System Recovery

Our nodes include an automatic recovery mechanism:

¡¤Ifa  node falls too far  behind  in  processing  slots,it will automatically  initiate a  restart
¡ñ During this recovery period,all requests are seamlessly routed to our shared backup pool
¡¤Once your node catches up and becomes healthy,traffc will resume to it


Questions and Support

¡¤Contact  us  through your Telegram  group(available for dedicated  node  customers)
¡¤You can also get support from the chat system on our website or in our Discord server

2025/2/2701:22                                                                                 Helius Docs



Dedicated Staked Connections

Dedicated Staked Connections are for trading firms and enterprises that require
guaranteed   staked    connection   bandwidth    for     sendTransaction     .It  is  available  as  an  add-  on  to  any  Helius  plan,and  pricing  is  based  on  your      sendTransaction      TPS(transaction      per second).

Submit this  intake  form   to  request  access,and  our  sales  team  will  be  in  touch.

¡¡¡¡¡¡¡¡







RPC

2025/2/2701:22                                                                                               Helius Docs



HTTP
Solana nodes accept HTTP requests using the JSON-RPC2.0 specification.


Info

¡¤For  JavaScript  applications,use  the   @solana/web3.js    library as a convenient interface for the RPC methods to interact with a Solana node.
¡¤For a PubSub connection to a Solana node,use the WebSocket API.




Request Formatting

To make a JSON-RPC request,send an HTTP POST request with a     Content-Type:
application/json        header.The JSON  request data should contain the following felds:

Field                         Type                          Description
jsonrpc	string	Set to "2.0".


id			A unique identifier for the request,generated by the
client.Can be a string,number or null.
	string |number		
		

method	
string	The name of the method to invoke.

params	
array	AJSON array of ordered parameter values.

¡¡¡¡¡¡¡¡


Example Request using cURL

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡


Response      Format

The response willbe a JSON object with the following fields:

Field                          Type                            Description

jsonrpc	
string	Matches the request specification
id	number	Matches the request identifier.

result	array|number|object|stri ng	Requested data or success confirmation.




Batch Requests

Requests can be sent in batches by sending an array of JSON-RPC request objects in a single POST request.

¡¡¡¡¡¡¡¡


Example Request with Commitment

The  commitment  parameter should be included as the last element in the  params  array:

2025/2/2701:22                                                                                               Helius Docs



¡¡¡¡¡¡¡¡



Definitions

¡¤Hash:ASHA-256  hash  of  a  chunk  of  data.
¡ñ Pubkey: The public key of an Ed25519 key-pair.
¡ñ Transaction:A list of Solana instructions signed by a client keypair to authorize those actions.
¡¤   Signature:An  Ed25519 signature of a transaction's  payload data,including instructions.This can be used to identify transactions.


Health Check

Although not part of the JSON-RPCAPI,a  GET  /health  request at the RPCHTTP
endpoint provides a health-check mechanism for load balancers or other network infrastructure.


Response     Codes
Status	Description



ok


The   node   is  within              
HEALTH CHECK SLOT DISTANCE slots  of  the

2025/2/2701:22                                                                                     Helius Docs


	latest cluster confirmed slot.

behind{distance}	The node is behind by distance slots from the atest cluster confirmed slot.

unknown	The node is unable to determine its status relative to the cluster.

Example  health  check   response  body:

¡ñ ok
¡ñ [behind       {distance}
¡ñ   unknown

2025/2/2701:22                                                                                          Helius Docs


getAccountlnfo
Returns allinformation associated with the account of provided Pubkey


getAccountlnfo

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id     integer
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getAccountInfo
	
Options: getAccountInfo
params one  of[]
+Show  available  items




Responses
>   200    Successfully  retrieved  account  information.
>   400  Invalid   request.
>   401   Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                          Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getBalance
Returns the  lamport  balance  of the account of provided  Pubkey


getBalance

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc          string¡¤enum       required
The  JSON-RPC  protocol  version.
Options:2.0
method    string¡¤enum           required
The name of the RPC method to invoke.
Options:g  etBalance
params    one     of[]   required
+Show available items



Responses
>   200   Successfully  retrieved account balance.
>   400   Invalid  request.

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getBlock
Returns identity and transaction information about a confirmed block in the ledger


getBlock

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc          string¡¤enum       required
The  JSON-RPC  protocol  version. Options:2.0
method    string¡¤enum           required
The name of the RPC method to invoke.
Options:g  etBlock
params    one     of[]   required
+Show available items



Responses
>   200   Successfully retrieved block details.
>   400   Invalid  request.

¡¡¡¡¡¡¡¡



curl -L \
--request   POST\
--url                 'https://mainnet.helius-rpc.com/?api-key=<api-key>'\
--header              'Content-Type:application/json'\
--data'{
"id":"1",
"jsonrpc":"2.0",
"method":"getBlock", "params":[
430
¡¡¡¡] ×Ó'
200  400



2025/2/2701:22                                                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getBlockCommitment
Returns commitment for  particular  block


getBlockCommitment

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version. Options:2.0
method    string¡¤enum           required
The name of the RPC method to invoke.
Options:  getBlockCommitment
params    integer[]         required
Block  number  identified  by  Slot(as u64  integer).



Responses
>   200   Successfully  retrieved  block  commitment.
>   400    Invalid  request.

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                     Helius Docs


getBlockHeight
Returns the current block height of the node


getBlockHeight

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string       required
Aunique  identifier  for  the  request. Example:1
jsonrpc         string¡¤enum      required
The JSON-RPC protocol version. Options:2.0
method   string¡¤enum         required
The name of the RPC method to invoke.
Options:g etBlockHeight
params   object[]        required
Configuration options for the request.

+Show child attributes




Responses
>   200  Successfully retrieved current block height.
>   400   Invalid request.

cURL     JavaScript      Python      HTTP



2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡

200 400

{



}

Successfully   retrieved   current   block   height.

2025/2/2701:22                                                                                          Helius Docs


getBlockProduction
Returns recent block production information from the current or previous epoch.


getBlockProduction

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc          string¡¤enum       required
The  JSON-RPC  protocol  version. Options:2.0
method    string¡¤enum           required
The name of the RPC method to invoke.
Options:  getBlockProduction
params    one     of[]   required
+Show available items



Responses
>   200   Successfully  retrieved  block  production  information.
>   400   Invalid  request.

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs




getBlockTime
Returns the estimated production time of a block.


getBlockTime

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique   identifer   for   the   request. Example:1
jsonrpc       string¡¤enum            required
The  JSON-RPC  protocol  version. Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.

Options:    getBlockTime
params    integer[]         required
Block  number  identified  by  Slot(as  u64  integer).



Responses
>   200   Successfully retrieved block time.
¡¡¡¡¡¡¡¡
>   400    Block time not available.


cURL        JavaScript        Python     HTTP

2025/2/2701:22                                                                                                                 Helius Docs



¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getBlocks
Returns alist of confrmed blocks between two slots


getBlocks

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc          string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example: getBlocks
	
Options: getBlocks
params    one     of[]   required
+Show  available  items




Responses
>   200    Successfully retrieved confirmed blocks.
>   400  Invalid   request.
401   Unauthorized,invalid APl  key.
500   Server  error.

2025/2/2701:22                                                                                                                 Helius Docs




¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getBlocksWithLimit
Returns alist of confirmed blocks starting at the given slot


getBlocksWithLimit

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc          string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example:g   etBlocksWithLimit
Options:    getBlocksWithLimit
params    object[]required
+Show child attributes




Responses
>   200    Successfully retrieved confirmed blocks.
>   400  Invalid   request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.

2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getClusterNodes
Returns  information  about  allthe   nodes  participating   in  the  cluster


getClusterNodes

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method       string¡¤enum        required
The name of the RPC method to invoke.
Example:g   etClusterNodes
Options:    getClusterNodes



Responses
>	200	Successfully retrieved cluster node information.
>	400	Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                               Helius Docs


curl -L \
--request     POST\
--url                      'https://mainnet.helius-rpc.com/?api-key=<api-key>'\
--header                 'Content-Type:application/json'\
--data'{
"id":"1",
"jsonrpc":"2.0",
"method":"getClusterNodes"
}'
200  400  401  500
{
"id":"1",
"jsonrpc":"2.0",
"result":[ {
"pubkey":"9QzsJf7LPLj8GkXbYT3LFDKqsj2hHG7TA3xinJHu8epQ",
"gossip":"10.239.6.48:8001",
"tpu":"10.239.6.48:8856",
"rpc":"10.239.6.48:8899",
"version":"1.0.0 c375ce1f",
"featureSet":1,
¡¡¡¡"shredVersion":1 }
¡¡¡¡] }
Successfully retrieved cluster node information.


2025/2/2701:22                                                                                          Helius Docs


getEpochlnfo
Returns information about the current epoch


getEpochlnfo

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getEpochInfo
	
Options: getEpochInfo
params object[]
+Show   child   attributes




Responses
>   200    Successfully  retrieved epoch  information.
>   400  Invalid   request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.

2025/2/2701:22                                                                                               Helius Docs




¡¡¡¡¡¡¡¡

200  400  401  500
{
"id":"1",
"jsonrpc":"2.0",
"result":{
"absoluteSlot":166598, "blockHeight":166500,  "epoch":27,
"slotIndex":2790,
"slotsInEpoch":8192,
"transactionCount":22661093
¡¡¡¡×Ó ×Ó
Successfully retrieved epoch information.


2025/2/2701:22                                                                                          Helius Docs


getEpochSchedule
Returns the epoch schedule information from this cluster's genesis config


getEpochSchedule

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:g   etEpochSchedule
Options:    getEpochSchedule



Responses
>200  Successfully  retrieved  epoch  schedule  information.
>   400    Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

200  400  401  500
{
"id":"1",
"jsonrpc":"2.0", "result":{
"slotsPerEpoch":8192,
"leaderScheduleSlotOffset":8192, "warmup":true,
"firstNormalEpoch":8,
¡¡¡¡"firstNormalSlot":8160 }
}
Successfully retrieved epoch schedule information.


2025/2/2701:22                                                                                          Helius Docs


getFeeForMessage
Get the fee the network will charge for a particular Message


getFeeForMessage

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc          string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example:g  etFeeForMessage
Options:  getFeeForMessage
params    one     of[]   required
+Show  available  items




Responses
>   200    Successfully retrieved the fee for the given message.
>   400  Invalid   request.
>   401    Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                          Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getFirstAvailableBlock
Returns the slot of the lowest confirmed block that has not been purged from the ledger


getFirstAvailableBlock

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getFirstAvailableBlock
Options: getFirstAvailableBlock



Responses
>200  Successfully  retrieved  the  slot  of the  lowest  confirmed  block.
>   400    Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getGenesisHash
Returns the genesis hash


getGenesisHash

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:g   etGenesisHash
Options:    getGenesisHash



Responses
>   200    Successfully retrieved the genesis hash.
>   400    Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡

200 400 401 500
{
"id":"1",
"result":"GH7ome3EiwEr7tu9JuTh2dpYWBJK3z69Xm1ZE3MEE6JC", "jsonrpc":"2.0"
×Ó
Successfully retrieved the genesis hash.


2025/2/2701:22                                                                                          Helius Docs


getHealth
Returns the current health of the node.A healthy node is one that is within    HEALTH_CHECK_SLOT_DISTANCE slots of the latest cluster confrmedslot.


getHealth

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
A  unique  identifier  for  the  request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example:  2.0 Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getHealth
	
Options: getHealth



Responses
>   200   The node is healthy.
>   500   The node is unhealthy.

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                     Helius Docs


getHighestSnapshotSlot
Returns the highest slot information that the node has snapshots for.This willfind the highest fullsnapshotslot,and the highest incremental snapshotslot based on the full  snapshot    slot,if    ther


getHighestSnapshotSlot

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
A unique identifier for the request. Example:1
jsonrpc            string¡¤enum
The  JSON-RPCprotocol  version.
Example:2.0 Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example: getHighestSnapshotSlot
Options:  getHighestSnapshotSlot



Responses
>   200   The node has a snapshot.
>500 The node has no snapshot.

cURL    JavaScript        Python      HTTP



2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getldentity
Returns the identity pubkey for the current node


getldentity

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
Aunique identifer for the request. Example:1
jsonrpc     string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method    string¡¤enum
The name of the RPC method to invoke.
Example:getIdentity
Options:  getIdentity



Responses
>200  Successfully  retrieved  the  identity  of  the  node.

>   400	Invalid  request.	
>401	Unauthorized,invalid	APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡




2025/2/2701:22                                                                                          Helius Docs


getlnflationGovernor
Returns the current  inflation governor


getlnflationGovernor

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getInflationGovernor
Options: getInflationGovernor



Responses
>200  Successfully  retrieved  inflation  governor  information.
>   400    Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

200  400  401  500
{
"id":"1",
"jsonrpc":"2.0",
"result":{
"initial":0.15,
"terminal":0.015, "taper":0.15,
"foundation":0.05,
¡¡¡¡"foundationTerm":7 }
}
Successfully retrieved inflation governor information.


2025/2/2701:22                                                                                          Helius Docs


getlnflationRate
Returns the specifc inflation values for the current epoch


getlnflationRate

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getInflationRate
Options: getInflationRate



Responses
>200  Successfully   retrieved   inflation   rate   information.
>   400    Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getlnflationReward
Returns the inflation/staking reward for alist of addresses for an epoch


getlnflationReward

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version. Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example:g   etInflationReward
Options:    getInflationReward
params one  of[]
+Show  available  items




Responses
>   200    Successfully  retrieved  inflation  reward  information.
>   400  Invalid   request.
>   401   Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                               Helius Docs



¡¡¡¡¡¡¡¡

200  400  401  500
{
"id":"1",
"jsonrpc":"2.0",
"result":[
{
"epoch":2,
¡¡"effectiveSlot":224, "amount":2500,
"postBalance":499999442500,
"commission":5
¡¡¡¡} ]
×Ó
Successfully retrieved inflation reward information.


2025/2/2701:22                                                                                     Helius Docs


getLargestAccounts
Returns the 20 largest accounts,by lamport balance(results may be cached up to two hours)

¡¡¡¡¡¡¡¡


getLargestAccounts

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string       required
Aunique  identifer  for  the  request. Example:1
jsonrpc     string¡¤enum         required
The JSON-RPC protocol version.
Example:2.0
Options:  2.0
method       string¡¤enum       required
The name of the RPC method to invoke.
Example:getLarg    estAccounts
Options:  getLargestAccounts
params   object[]
+Show  child  attributes



Responses
>200 Successfully retrieved the largest accounts.


2025/2/2701:22                                                                                 Helius Docs



>400  Invalid  request.

>401 Unauthorized,invalid APl key.
>500   Server   error.
cURL    JavaScript       Python     HTTP

curl   -L  \
--request  POST\
--url             'https://mainnet.helius-rpc.com/?api-key=<api-key>'\
--header           'Content-Type:application/json'\
-- ai':{"1",
"jsonrpc":"2.0",
"method":"getLargestAccounts", "params":[
{
"commitment":"finalized", "filter":"circulating"
¡¡¡¡×Ó ]
}'
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getLatestBlockhash
Returns  the  latest  blockhash


getLatestBlockhash

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version. Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example:g   etLatestBlockhash
Options:  getLatestBlockhash
params  object[]
+Show   child   attributes




Responses
>   200    Successfully retrieved the latest blockhash information.
>   400  Invalid   request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.

2025/2/2701:22                                                                                                    Helius Docs



cURL   JavaScript   Python    HTTP
curl    -L\
--request      POST\
--url                           'https://mainnet.helius-rpc.com/?api-key=<api-key>'\
--header                     'Content-Type:application/json'\
--data      '{
"id":"1",
"jsonrpc":"2.0",
"method":"getLatestBlockhash",
"params":[ {
"minContextSlot":1000,
"commitment":"processed"
¡¡¡¡¡¡×Ó 	]  ×Ó'

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getLeaderSchedule
Returns the leader schedule for an epoch


getLeaderSchedule

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc          string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example:g   etLeaderSchedule
Options:    getLeaderSchedule
params  one   of[]
+Show  available  items




Responses
>   200    Successfully retrieved the leader schedule.
>   400  Invalid   request.
>   401   Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                     Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getMaxRetransmitSlot
Get the max slot seen from retransmit stage


getMaxRetransmitSlot

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method       string¡¤enum        required
The name of the RPC method to invoke.
Example:  getMaxRetransmitSlot
	
Options:    getMaxRetransmitSlot



Responses
>	200	Successfully retrieved the maximum retransmitslot.
>	400	Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getMaxShredlnsertSlot
Get the max slot seen from after shred insert.


getMaxShredlnsertSlot

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method        string¡¤enum        required
The name of the RPC method to invoke.
Example:  getMaxShredInsertSlot
	
Options:    getMaxShredInsertSlot



Responses
>	200	Successfully retrieved the maximum shred insertslot.
>	400	Invalid  request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.


cURL     JavaScript          Python       HTTP

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getMinimumBalanceForRentExemption
Returns  minimum  balance  required  to  make  account  rent  exempt.


getMinimumBalanceForRentExemption

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method       string¡¤enum        required
The name of the RPC method to invoke.
Example:g   etMinimumBalanceForRentExemption
Options:    getMinimumBalanceForRentExemption
params  one   of[]
+Show  available  items




Responses
>   200    Successfully retrieved the minimum balance for rent exemption.
>   400  Invalid   request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.

2025/2/2701:22                                                                                 Helius Docs



¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getMultipleAccounts
Returns the account information for a list of Pubkeys.


getMultipleAccounts

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example:g   etMultipleAccounts
Options:    getMultipleAccounts
params    one     of[]   required
+Show  available  items




Responses
>   200    Successfully retrieved the account details.
>   400  Invalid   request.
>   401    Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                               Helius Docs



¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getProgramAccounts
Returns all accounts owned  by the  provided  program  Pubkey


getProgramAccounts

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id    string        required
Aunique   identifier  for  the   request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method    string¡¤enum          required
The name of the RPC method to invoke.
Example:g   etProgramAccounts
Options:    getProgramAccounts
params    one         of[]required
+Show  available  items




Responses
>   200    Successfully retrieved program accounts.
>   400  Invalid   request.
>   401   Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                 Helius Docs



¡¡¡¡¡¡¡¡

200  400  401  500


{


"id":  "1",
"jsonrpc":    "2.0" ,
"result":[ 5
"pubkey":      "CxELquR1gPP8wHe33gZ4Q¡ÁqGB3sZ9RSwsJ2KshVewkFY"
"account":{
"lamports":        15298080  ,
"owner":      "4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T"
"executable":   false , "rentEpoch":        28 ,
"space":42, "data":[
"2R9jLfiAQ9bgdcw6h8s44439", "base58"
]
}
¡¡¡¡} ]








,



,

×Ó
Successfully retrieved program accounts.

2025/2/2701:22                                                                                     Helius Docs


getRecentPerformanceSamples
Returns alist of recent performance samples,in reverse slot order.Performance samples     are  taken  every  60  seconds  and  include  the  number  of  transactions   and  slots  that  occur  in  a given time window.


getRecentPerformanceSamples

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string       required
A unique identifier for the request. Example:1
jsonrpc     string¡¤enum         required
The  JSON-RPCprotocol  version. Example:2.0
Options:2.0
method       string¡¤enum       required
The name of the RPC method to invoke.
Example: getRecentPerformanceSamples
	
Options:  getRecentPerformanceSamples
params integer[]
Number of samples to return(maximum 720).



Responses

>   200  Successfully retrieved performance samples.
>   400  Invalid  request.
>401  Unauthorized,invalid  APl  key.


2025/2/2701:22                                                                                               Helius Docs



>500    Server   error.


cURL       JavaScript       Python     HTTP

curl   -L\
--request   POST\
--url                 'https://mainnet.helius-rpc.com/?api-key=<api-key>'\
--header              'Content-Type:application/json'\
--data     '{
"id":"1",
"jsonrpc":"2.0",
"method":"getRecentPerformanceSamples", "params":[
4
¡¡] ×Ó'

200  400  401   500

{
"id":"1",
"jsonrpc":"2.0", "result":[
{
"slot":348125,
"numTransactions":126,
"numNonVoteTransactions":1, "samplePeriodSecs":60,
"numSlots":126

¡¡¡¡] ×Ó
Successfully retrieved performance samples.

2025/2/2701:22                                                                                          Helius Docs


getRecentPrioritizationFees
Returns alist of prioritization fees from recent blocks.


getRecentPrioritizationFees

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string        required
Aunique identifier for the request. Example:1
jsonrpc           string¡¤enum       required
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method        string¡¤enum        required
The name of the RPC method to invoke.
Example:getRecentPrioritizationFees
Options: getRecentPrioritizationFees
params string[][]
A  base-58  encoded  account  address.
+Show    string[]



Responses
>	200	Successfully retrieved recent prioritization fees.
>	400	Invalid  request.
>	401	Unauthorized,invalid  APl  key.


2025/2/2701:22                                                                                 Helius Docs



>500   Server   error.

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getSignatureStatuses
Returns the statuses of alist of signatures.Each signature must be a txid,the first signature of a transaction.


getSignatureStatuses

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
A  unique  identifier  for  the  request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example:  2.0 Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getSignatureStatuses
	
Options: getSignatureStatuses
params one  of[]
+Show  available  items




Responses
>   200   Successfully  retrieved signature statuses.
400   Invalid  request.
401   Unauthorized,invalid APl  key.


2025/2/2701:22                                                                                 Helius Docs



500 Server error.


¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No  body
Successfully retrieved signature statuses.


2025/2/2701:22                                                                                     Helius Docs


getSignaturesForAddress
Returns signatures for confirmed transactions that include the given address in their    accountKeys list.Returns signatures backwards in time from the provided signature or most  recent  confrmed  block

Note: This query may occasionally fail due to internal timeouts in the archival database.If this occurs,please  retry.


getSignaturesForAddress

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id    string       required
A unique identifier for the request. Example:1
jsonrpc      string¡¤enum          required
The  JSON-RPCprotocol  version. Example:2.0
Options:2.0
method   string¡¤enum         required
The name of the RPC method to invoke.
Example:getSig    naturesForAddress
Options: getSignaturesForAddress
params   one    of[]   required
+Show available items



Responses


2025/2/2701:22                                                                                     Helius Docs



>200 Successfully retrieved signatures for the specifed address.

>400	Invalid   request.	
>401	Unauthorized,invalid	APl  key.
>500    Server   error.

¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getSlot
Returns the slot that has reached the given or default commitment level


getSlot

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:g   etSlot
Options:    getSlot
params object[]
+Show   child   attributes




Responses
>   200   Successfully retrieved the current slot.
>   400  Invalid   request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.

2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getSlotLeader
Returns the current slot leader


getSlotLeader

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getSlotLeader
	
Options: getSlotLeader
params object[]
+Show   child   attributes




Responses
>   200   Successfully retrieved the slot leader.
>   400  Invalid   request.
>401    Unauthorized,invalid   APl    key.
>500    Server    error.

2025/2/2701:22                                                                                          Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getSlotLeaders
Returns the slot leaders for agiven slot range


getSlotLeaders

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getSlotLeaders
	
Options: getSlotLeaders
params one  of[]
+Show  available  items




Responses
>   200   Successfully retrieved slot leaders.
>   400  Invalid   request.
>   401   Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                               Helius Docs



cURL       JavaScript       Python     HTTP

curl   -L\
--request   POST\
--url                 'https://mainnet.helius-rpc.com/?api-key=<api-key>'\
--header              'Content-Type:application/json'\
--data'{
"jsonrpc":"2.0", "id":1,
"method":"getSlotLeaders", "params":[
100,
10
¡¡¡¡] ×Ó'
200  400  401  500
example application/json

No body
Successfully retrieved slot leaders.


2025/2/2701:22                                                                                          Helius Docs


getStakeMinimumDelegation
Returns the stake minimum delegation,in lamports.


getStakeMinimumDelegation

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:g   etStakeMinimumDelegation
Options:    getStakeMinimumDelegation
params object[]
+Show   child   attributes




Responses
>   200    Successfully retrieved the stake minimum delegation.
>   400  Invalid   request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.

2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


getSupply
Returns information about the current supply


getSupply

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getSupply
	
Options: getSupply
params object[]
+Show   child   attributes




Responses
>   200   Successfully  retrieved  the supply  information.
>   400  Invalid   request.
>401   Unauthorized,invalid   APl   key.
>500    Server    error.

2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No  body
Successfully retrieved the supply information.


2025/2/2701:22                                                                                     Helius Docs


getTokenAccountBalance
Returns  the  token  balance  of  an  SPL  Token  account.


getTokenAccountBalance

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
Aunique  identifer  for  the  request. Example:1
jsonrpc     string¡¤enum
The JSON-RPC protocol version.
Example: 2.0
Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example:g  etTokenAccountBalance
Options:  getTokenAccountBalance
params   one    of[]
+Show available items



Responses
>   200   Successfully retrieved the token account balance.

>   400  Invalid  request.
>401  Unauthorized,invalid  APl  key.
>500   Server   error.

2025/2/2701:22                                                                                 Helius Docs



¡¡¡¡¡¡¡¡
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                     Helius Docs


getTokenAccountsByDelegate
Returns   all   SPL   Token   accounts   by   approved   Delegate.


getTokenAccountsByDelegate

¡¡¡¡¡¡¡¡


Body

id      string
Aunique  identifer  for  the  request. Example:1
jsonrpc     string¡¤enum
The JSON-RPC protocol version.
Example: 2.0
Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example:g  etTokenAccountsByDelegate
Options:  getTokenAccountsByDelegate
params   one    of[]
+Show available items



Responses
>   200  Successfully retrieved token accounts by delegate.

cURL    JavaScript        Python      HTTP



2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡

200
example application/json

No  body
Successfully retrieved token accounts by delegate


2025/2/2701:22                                                                                     Helius Docs


getTokenAccountsByOwner
Returns  all  SPL  Token  accounts  by  token  owner.


getTokenAccountsByOwner

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
Aunique  identifer  for  the  request. Example:1
jsonrpc     string¡¤enum
The JSON-RPC protocol version.
Example: 2.0
Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example:g  etTokenAccountsByOwner
Options:  getTokenAccountsByOwner
params   one    of[]
+Show available items



Responses
>   200   Successfully retrieved token accounts by owner.

>   400  Invalid  request.
>401  Unauthorized,invalid  APl  key.
>500   Server   error.

2025/2/2701:22                                                                                 Helius Docs



¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No body
Successfully retrieved token accounts by owner.


2025/2/2701:22                                                                                     Helius Docs


getTokenLargestAccounts
Returns  the  20  largest  accounts  of  a  particular  SPL  Token  type.


getTokenLargestAccounts

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
Aunique  identifer  for  the  request. Example:1
jsonrpc     string¡¤enum
The JSON-RPC protocol version.
Example: 2.0
Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example:g  etTokenLargestAccounts
Options:  getTokenLargestAccounts
params   one    of[]
+Show available items



Responses
>   200   Successfully retrieved the largest token accounts.

>   400	Invalid  request.
>   401	Unauthorized,invalid APl key.
>500   Server   error.

2025/2/2701:22                                                                                     Helius Docs



¡¡¡¡¡¡¡¡





2025/2/2701:22                                                                                     Helius Docs


getTokenSupply
Returns  the   total  supply  of  an   SPL  Token  type.


getTokenSupply

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
Aunique  identifer  for  the  request. Example:1
jsonrpc     string¡¤enum
The JSON-RPC protocol version.
Example: 2.0
Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example:g  etTokenSupply
Options:  getTokenSupply
params   one    of[]
+Show available items



Responses
>   200   Successfully retrieved the token supply

>   400	Invalid  request.
>   401	Unauthorized,invalid APl key.
>500   Server   error.

2025/2/2701:22                                                                                     Helius Docs



¡¡¡¡¡¡¡¡

200  400   401   500

example     application/json


No   body


Successfully retrieved the token supply.

2025/2/2701:22                                                                                          Helius Docs


getTransaction
Returns transaction details for a confirmed transaction


getTransaction

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example:getTransaction
	
Options: getTransaction
params one  of[]
+Show  available  items




Responses
>   200    Successfully retrieved the transaction details.
400   Invalid  request.
401   Unauthorized,invalid APl  key.
500   Server  error.

2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No  body
Successfully retrieved the transaction details.


2025/2/2701:22                                                                                     Helius Docs


getTransactionCount
Returns   the   current   Transaction   count   from    the   ledger


getTransactionCount

POST              /?api-key=<api-key>                                                                                             D  Test  it



Body

id      string
Aunique  identifer  for  the  request. Example:1
jsonrpc     string¡¤enum
The JSON-RPC protocol version.
Example: 2.0
Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example:g  etTransactionCount
Options:  getTransactionCount
params   object[]
Configuration  options for the  request.
+Show  child  attributes



Responses
>   200   Successfully retrieved the transaction count.
>   400   Invalid request.
>   401   Unauthorized,invalid APl key.


2025/2/2701:22                                                                                 Helius Docs



>   500 Server error.

¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No  body
Successfully retrieved the transaction count.


2025/2/2701:22                                                                                          Helius Docs


getVersion
Returns the current Solana version running on the node


getVersion

POST	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
params array
No   parameters   required.
jsonrpc       string¡¤enum
The   JSON-RPCprotocol   version. Example:2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example: getVersion
	
Options: getVersion



Responses
>   200   Successfully retrieved the Solana version details.
>    400  Invalid   request.
>401    Unauthorized,invalid   APl    key.
>500    Server    error.

2025/2/2701:22                                                                                          Helius Docs


¡¡

200  400  401  500
example application/json

No  body
Successfully retrieved the Solana version details.


2025/2/2701:22                                                                                     Helius Docs


getVoteAccounts
Returns the account info and associated stake for all the voting accounts in the current bank.


getVoteAccounts

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
A unique identifier for the request. Example:1
jsonrpc      string¡¤enum
The JSON-RPC protocol version.
Example: 2.0 Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example: getVoteAccounts
Options: getVoteAccounts
params   object[]
+Show child attributes




Responses
>   200   Successfully retrieved vote accounts.
400  Invalid request.
401  Unauthorized,invalid APl key.


2025/2/2701:22                                                                                 Helius Docs



500 Server error.


¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No body
Successfully retrieved vote accounts.


2025/2/2701:22                                                                                          Helius Docs


isBlockhashValid
Returns whether a blockhashis still valid or not


isBlockhashValid

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id       string
Aunique identifer for the request. Example:45
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example: isBlockhashValid
	
Options: isBlockhashValid
params one  of[]
+Show  available  items




Responses
>   200    Successfully evaluated blockhash validity.
>   400  Invalid   request.
>   401   Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No body
Successfully evaluated blockhash validity.


2025/2/2701:22                                                                                     Helius Docs



minimumLedgerSlot
Returns the lowest slot that the node has information about in its ledger.


minimumLedgerSlot

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id      string
Aunique  identifer  for  the Example:1	

request.

params   array
No parameters are required for this method.

jsonrpc      string¡¤enum
The  JSON-RPCprotocol  version. Example:2.0
Options:2.0
method           string¡¤enum
The name of the RPC method to invoke.
Example: minimumLedgerSlot
Options:  minimumLedgerSlot



Responses
>   200   Successfully retrieved the minimum ledgerslot number.
>   400  Invalid  request.
>401   Unauthorized,invalid  APl  key.
>500   Server   error.

2025/2/2701:22                                                                                               Helius Docs




200  400  401  500
example application/json

No  body
Successfully retrieved the minimum edger slot number.


2025/2/2701:22                                                                                          Helius Docs


requestAirdrop
Requests an airdrop of lamports to a Pubkey


requestAirdrop

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡	


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example: requestAirdrop
	
Options: requestAirdrop
params one  of[]
+Show  available  items




Responses
>   200   Successfully requested airdrop.
>   400  Invalid   request.
>   401   Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                          Helius Docs



cURL        JavaScript        Python     HTTP

curl      -L\
--request   POST\
--url                 'https://mainnet.helius-rpc.com/?api-key=<api-key>'\
--header              'Content-Type:application/json'\
--data'{
"jsonrpc":"2.0",
"id":1,
"method":"requestAirdrop", "params":[
¡¡"83astBRguLMdt2h5U1Tpdq5tjFoJ6noeGwaY3mDLVcri", 1000000000
¡¡¡¡] ×Ó'
200  400  401  500
example application/json

No body
Successfully requested airdrop.


2025/2/2701:22                                                                                          Helius Docs



sendTransaction
Submits a signed transaction to the cluster for processing.



sendTransaction

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example: sendTransaction
	
Options: sendTransaction
params    one     of[]
+Show  available  items


cURL     JavaScript            Python     HTTP



2025/2/2701:22                                                                                     Helius Docs



¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs



simulateTransaction
Simulate sending atransaction


simulateTransaction

¡¡	/?api-key=<api-key>	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


Body

id       string
Aunique identifer for the request. Example:1
jsonrpc       string¡¤enum
The  JSON-RPC  protocol  version.
Example: 2.0
Options:2.0
method     string¡¤enum
The name of the RPC method to invoke.
Example: simulateTransaction
	
Options: simulateTransaction
params one  of[]
+Show  available  items




Responses
>   200    Successfully simulated the transaction.
>   400  Invalid   request.
>   401    Unauthorized,invalid  APl  key.
>500    Server    error.

2025/2/2701:22                                                                                                    Helius Docs



¡¡¡¡¡¡¡¡

200  400  401  500
example application/json

No  body
Successfully simulated the transaction.


2025/2/2701:22                                                                                 Helius Docs


Websocket
Stream data directly to your applications with our websocket integration.

Websockets allow for two-way communication between a client and a server.Unlike   traditional request-response models,Websockets keep a persistent connection open, enabling real-time data exchange.This is perfect for applications that require instant   updates,such as chat apps,online games and marketplaces.



Standard Websockets

Helius   supports   allstable   Solana   Websockets. You can  use these with your  Helius  WSS  URL:
¡ñ Mainnet-    wss://mainnet.helius-rpc.com
¡¤   Devnet- [wss://devnet.helius-rpc.com

¡¡¡¡¡¡¡¡

After connecting to the websocket:

¡¤Submit subscription requests to the websocket using the methods. ¡¤Multiple subscriptions may be active at once.
¡ñ Many subscriptions take the optional  commitment  parameter,defining how finalized a change should be to trigger anotification.For subscriptions,if commitment is
unspecified,the default value is      finalized .



Javascript Examples





¡Ì Program   Susbcribe


2025/2/2701:22                                                                                               Helius Docs



const      WebSocket       =require('ws');

//Create    a    WebSocket    connection
const       ws       =new       WebSocket('wss://mainnet.helius-rpc.com/?api-key:
//Function   to    send   a    request   to    the   WebSocket    server function         sendRequest(ws){
const     request     ={ "jsonrpc":"2.0",   "id":1,
"method":"programSubscribe",
"params":[
"6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEWF6P", {
"encoding":"jsonParsed"
¡¡¡¡} ]
×Ó£»
¡¡¡¡¡¡ws.send(JSON.stringify(request)); ×Ó
//Function   to   send   a   ping   to   the   WebSocket   server
function            startPing(ws){
if(ws.readyState             ===WebSocket.OPEN){
ws.ping();
console.log('Ping            sent');
×Ó
¡¡¡¡¡¡×Ó£¬30000);// Ping every 30 seconds ×Ó
//Define    WebSocket    event    handlers
ws.on('open',function   open(){
console.log('WebSocket      is      open');
sendRequest(ws);//Send   a    request    once   the   WebSocket    is    op startPing(ws);//Start          sending          pings
×Ó);
ws.on('message',function incoming(data){
const          messageStr          =data.toString('utf8'); try  {
const          messageObj=JSON.parse(messageStr); console.log('Received:',messageObj);
×Ó catch(e){
console.error('Failed    to    parse    JSON:',e);
¡¡¡¡¡¡×Ó ?):

2025/2/2701:22                                                                                               Helius Docs



ws.on('error',function         error(err){
console.error('WebSocket               error:',err);
×Ó);
ws.on('close',function                close(){
console.log('WebSocket      is      closed');
×Ó);
¡ÌSignature  Subscribe
¡¡This subscription is for a single notification.The server automatically cancels it after sending the     signatureNotification      via the RPC.


2025/2/2701:22                                                                             Helius Docs



const        WebSocket        =require('ws');
//Create a WebSocket connection
const         ws         =new         WebSocket('wss://mainnet.helius-rpc.com/?api-key:
//Function    to    send    a    request    to    the    WebSocket    server function           sendRequest(ws){
const      request      ={  "jsonrpc":"2.0", "id":1,
"method":"signatureSubscribe",
"params":[
"2EBVM6cB8vAAD93Ktr6Vd8p67XPbQzCJX47MpReuiCXJAtcjaxpvl {
"commitment":"finalized",
¡¡¡¡"enableReceivedNotification":false ×Ó
¡¡¡¡] ×Ó£»
¡¡¡¡¡¡ws.send(JSON.stringify(request)); }
//Function   to    send    a    ping    to    the    WebSocket    server function       startPing(ws){
setInterval(()=>{
if(ws.readyState     ===WebSocket.0PEN){
ws.ping();
console.log('Ping      sent');
×Ó
¡¡¡¡¡¡×Ó£¬30000);// Ping   every   30   seconds ×Ó
//Define     WebSocket      event     handlers
ws.on('open',function         open(){
console.log('WebSocket        is        open');
sendRequest(ws);//Send    a     request     once    the     WebSocket     is    op startPing(ws);//Start      sending      pings
×Ó);
ws.on('message',function        incoming(data){
const            messageStr            =data.toString('utf8');
try   {
const             messageObj=JSON.parse(messageStr); console.log('Received:',messageObj);
×Ó catch(e)S
console.error('Failed      to      parse      JSON:',e);
×Ó

2025/2/2701:22                                                                                                    Helius Docs


×Ó);
ws.on('error',function         error(err){
console.error('WebSocket                   error:',err);
×Ó);
ws.on('close',function      close()S
console.log('WebSocket              is              closed');
×Ó);


2025/2/2701:22                                                                                               Helius Docs



accountSubscribe
Subscribe to an account to receive notifications when the lamports or data for a given account public key changes


Parameters

string   (required)

Description: Account Pubkey,as a base-58 encoded string. object  (optional)
Description:Configuration  object  containing  the  following  fields:

¡ñ  commitment  (string,optional):
Specifies the desired level of commitment.
¡ñ encoding    (string,optional):
Specifies the encoding format for Account data.
Values:
o    base58
	
o     base64
o      base64+zstd
	
¡£ jsonParsed

¡¡¡¡¡¡¡¡


Details


Result

The result of the subscription will returna <number> which serves as the subscription ID. This ID is required for unsubscribing from the account notifications.

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs




Code  Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

¡¡¡¡¡¡¡¡


Notification Format

The notification format follows the same structure as the   getAccountInfo    RPCHTTP
method.


Base58    Encoding    Example:

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡


Parsed-JSON Encoding Example:

2025/2/2701:22                                                                             Helius Docs



{
"jsonrpc":"2.0",
"method":"accountNotification", "params":S
"result":{   "context":{
¡¡¡¡"slot":5199307 ×Ó£¬
"value":{
"data":{












¡¡¡¡×Ó ×Ó£¬
"executable":false, "lamports":33594,
"owner":"11111111111111111111111111111111",
"rentEpoch":635, "space":80
}
×Ó£¬
"subscription":23784
¡¡¡¡} ×Ó

¡¡¡¡¡¡¡¡


Notes
	
¡ñ   The   base58  encoding  format  represents  raw  account data as a string.
¡ñ The jsonParsed  encoding format provides structured information,parsed into JSON.

2025/2/2701:22                                                                                               Helius Docs



accountUnsubscribe
Unsubscribe from account change notifications


Parameters

number (required)

Description:ID of the account subscription to cancel.




Result

The result will return a <bool>  indicating the success of the unsubscribe operation.

¡ñ   true  :Unsubscribe     operation    succeeded.
¡ñ   false    :Unsubscribe    operation    failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡


Notes

¡ñ The id provided in the parameters should match the subscription ID obtained during the initial subscription process.
¡ñ The response willconfrm if the subscription was successfully canceled.

2025/2/2701:22                                                                                               Helius Docs



blockSubscribe
Subscribe to receive notification anytime a new block is confirmed or finalized.

¡¡¡¡¡¡¡¡


Parameters

filter    (string|object,required)

Description:Filter criteria for the logs to receive results based on account type.

String Options:

¡ñ  [all:       Include all transactions in the block.

Object Options:

AJSON object with the following field:

¡ñ   mentionsAccountOrProgram(string     ):
Return only transactions that mention the provided public key(as a base-58 encoded string).
If no mentions occur in a given block,no notification will be sent.

¡¡¡¡¡¡¡¡
object  (optional)

Description: Configuration object containing the following fields:

¡ñ  commitment  (string,optional): Default:finalized   .
Note:  processed    is  not  supported.
	
¡ñ   encoding (string,optional):
Default:  json  .Specifies the  encoding format for  each returned transaction.

2025/2/2701:22                                                                                               Helius Docs



Values:
o   json   
o[  jsonParsed
o    base58
¡£  base64
Details:
¡£  [jsonParsed   attempts to use program-specific instruction parsers to return more human-readable and explicit data in the           transaction.message.instructions     list.
¡£If    jsonParsed  is requested but a parser cannot be found,the instruction falls back to regular JSON encoding(accounts    ,data    ,and    programIdIndex   fields).
¡ñ transactionDetails (string,optional):
Default:  full    .Specifies the level of transaction detail to return.
Values:
	
o     full
o  [accounts      
o   signatures

o  none
Details:
o  If   accounts   is requested,transaction details onlyinclude signatures and an annotated list of accounts in each transaction.
¡£Transaction metadata is limited       to:fee,err,pre        balances,post       balances, pre  token   balances,and    post  token   balances .
¡ñ  maxSupportedTransactionVersion (number,optional):
Specifies the maximum transaction version to return in responses.
Details:
oIf the requested block contains a transaction with a higher version,an error will be returned.
¡£lf omitted,only legacy transactions will be returned,and a block containing any versioned transaction willprompt an error.
¡ñ   showRewards (bool,optional):          
Whether to populate the  rewards  array.Default behavior includes rewards if this parameter is not provided.

2025/2/2701:22                                                                                               Helius Docs





Result

Returns an  integer    which serves as the subscription ID.This IDis required to unsubscribe.

¡¡¡¡¡¡¡¡


Code Samples

Request Example 1(Subscribe to all transactions ina block):

¡¡¡¡¡¡¡¡

Request Example 2(Filter by account and include optional configuration):

¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡


Notification Format

The notification is an object with the following fields:

¡ñ        slot(u64):The corresponding slot.
¡ñ err(object             |null):Error if an issue occurs while publishing the notification; otherwise   null.
¡ñ block(object              |null):A block object as seen in the getBlock  RPCHTTP method.

¡¡¡¡¡¡¡¡


Example   Notification

2025/2/2701:22                                                                                      Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


blockUnsubscribe
Unsubscribe from block notifications



Parameters

integer (required)

Description:Subscription ID to cancel.




Result

Returns a|<bool>    indicating whether the unsubscribe operation was successful:

¡ñ    true :Unsubscribe operation succeeded.
¡ñ  false  :Unsubscribe  operation failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


logsSubscribe
Subscribe to transaction logging


Parameters

filter    (string|object,required)

Filter criteria for the logs to receive results by account type.

String Options:

¡ñ all  :Subscribe to alltransactions except for simple vote transactions.
¡¡¡ñ   allWithVotes  :Subscribe to all transactions,including simple vote transactions. Object Options:
An object with the following feld:

¡ñ  mentions(array     of strings):Array containing a single Pubkey(base-58 encoded string).Subscribes only to transactions mentioning this address.

Note: The  mentions  field supports only one Pubkey string per method call.Providing additional addresses will result in an error.

¡¡¡¡¡¡¡¡
object (optional)

Configuration object containing the following field:

¡ñ  commitment (string,optional):Specifies the desired level of commitment.




Result

2025/2/2701:22                                                                             Helius Docs


Returns an      <integer>  representing  the  subscription   ID.This  ID  is  required  for unsubscribing.

¡¡¡¡¡¡¡¡


Code  Sample

Request Example 1(Filter by mentions with optional configuration):

¡¡¡¡¡¡¡¡

Request Example 2(Subscribe to all transactions):

¡¡¡¡¡¡¡¡

Response Example:

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius Docs




Notification Format

The notification is an RpcResponse JSON object with the following fields in  value :

¡ñ[signature(string   ):The transaction signature,base58 encoded.
¡ñ  err(object           |null ):Error if the transaction failed;null      if the transaction succeeded.
¡ñ  logs(array            |null ):Array of log messages output by the transaction instructions
during  execution.If  simulation  failed   before  the  transaction   could  execute(e.g.,due  to an invalid blockhash or signature verification failure),this will be     null.



Example   Notification

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


logsUnsubscribe
Unsubscribe from transaction logging



Parameters

integer (required)

Subscription ID to cancel.




Result

Returns a|<bool>    indicating whether the  unsubscribe  operation was successful:

¡ñ    true :Unsubscribe  operation  succeeded.
¡ñ  false  :Unsubscribe  operation  failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius Docs


programSubscribe
Subscribe to aprogram to receive notifications when the lamports or data for an account owned by the given program changes


Parameters

string   (required)

Pubkey of the  program  id  ,as a base-58 encoded string.



object  (optional)

Configuration object containing the following fields:

¡ñ   commitment  (string,optional):Specifies   the   desired   level   of   commitment.
¡ñ filters      (array,optional):Filters to refine the results.The resultant account must meet all filter criteria to be included.
¡¤      encoding  (string,optional):Specifies the encoding format for Account data. Values:
¡£  base58
	
O      base64

o    base64+zstd
	
o [jsonParsed
Details:
o    base58  encoding  is  slower.
o   jsonParsed  attempts to use program-specific state parsers to return more human-readable and explicit account state data.
o If jsonParsed is requested but a parser cannot be found,the encoding falls back to  base64 (detectable when the data feld is type string).

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius Docs




Result

Returns an[<integer>]   representing the subscription ID.This ID is required for unsubscribing.




Code Samples

Request Example 1(Default confguration):

¡¡¡¡¡¡¡¡

Request Example 2( jsonParsed encoding):

¡¡¡¡¡¡¡¡

Request Example 3(Filter by data size):

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

Response Example:

¡¡¡¡¡¡¡¡


Notification Format

The notifcation format is a single program account object,structured similarly to the getProgramAccounts    RPC HTTP method.


Base58 Encoding Example:

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡


Parsed-JSON   Encoding   Example:

2025/2/2701:22                                                                                      Helius Docs



¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs



programUnsubscribe
Unsubscribe from program-owned account change notifications



Parameters

number (required)

ID of the account subscription to cancel.




Result

Returns a|<bool>    indicating whether the  unsubscribe  operation was successful:

¡ñ    true :Unsubscribe  operation  succeeded.
¡ñ  false  :Unsubscribe  operation  failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs



rootSubscribe
Subscribe to receive notification anytime a new root is set by the validator.



Parameters


None

No parameters are required for this method.



Result

Returns an    integer     representing the subscription ID.This ID is required to unsubscribe.



Code   Sample Request Example:
{
"jsonrpc":"2.0", "id":1,
¡¡¡¡"method":"rootSubscribe" ×Ó

Response Example:



2025/2/2701:22                                                                                               Helius Docs




Notification Format

The notification provides the latest root slot number.

Example Notification:

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs



rootUnsubscribe
Unsubscribe from root notifcations


Parameters

number (required)

The subscription ID to cancel.




Result

Returns a|<bool>    indicating whether the unsubscribe operation was successful:

¡ñ    true :Unsubscribe operation succeeded.
¡ñ  false  :Unsubscribe  operation failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


signatureSubscribe
Subscribe to receive a notification when the transaction with the given signature reaches the  specifed  commitment  level.



Parameters

string (required)

The transaction signature,as a base-58 encoded string.

Info:

¡¤The transaction signature  must  be  the  first signature from  the  transaction.


object (optional)

Configuration object containing the following fields:

¡ñ   commitment  (string,optional):Specifies  the  desired  level  of  commitment.
¡ñ        enableReceivedNotification(bool,optional):Determines   whether  to   subscribe  for notifications when signatures are received by the RPC,in addition to when they are
processed.


Result

Returns an     <integer>  representing the subscription  ID.This  ID is required for unsubscribing.


Code Sample

2025/2/2701:22                                                                                               Helius Docs



Request Example:

¡¡¡¡¡¡¡¡

Response Example:

¡¡¡¡¡¡¡¡


Notification Format

The notification is an RpcResponse JSON object with the following felds in     value:

¡ñ        slot(u64 ):The  corresponding  slot. ¡ñ[ value(object                |string ):
o  If enableReceivedNotification  is true and the signature is received,the literal string "receivedSignature" .
oWhen the  signature  is  processed:
err(object         |null):
¡ñ null     if the transaction succeeded at the specified commitment level.
¡ñ A  TransactionError     object if the transaction failed.

2025/2/2701:22                                                                                               Helius Docs



Example Responses

Notification for a Successfully Processed Transaction:

¡¡¡¡¡¡¡¡

Notification for a Successfully Received Transaction Signature:


{	
	"jsonrpc":"2.0",
"method":"signatureNotification", "params":{
"result":{  "context":{
¡¡¡¡"slot":5207624 ×Ó£¬
¡¡¡¡"value":"receivedSignature" ×Ó£¬
¡¡¡¡"subscription":24006 }
25	


2025/2/2701:22                                                                                               Helius Docs


signatureUnsubscribe
Unsubscribe  from  signature  confirmation  notification



Parameters

number (required)

The subscription ID to cancel.




Result

Returns a|<bool>    indicating whether the  unsubscribe  operation was successful:

¡ñ    true :Unsubscribe  operation  succeeded.
¡ñ  false  :Unsubscribe  operation  failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


slotSubscribe
Subscribe to receive notification anytime a slot is processed by the validator



Parameters


None

No parameters are required for this method.



Result

Returns an  <integer>   representing the subscription ID.This ID is required to unsubscribe.



Code   Sample Request Example:
{
"jsonrpc":"2.0", "id":1,
¡¡¡¡"method":"slotSubscribe" }

Response Example:



2025/2/2701:22                                                                                 Helius Docs




Notification Format

The  notification  is  an  object  with   the  following   fields:

¡ñ[parent(u64 ):The parentslot.
¡ñ root(u64)     :The current root slot.
¡ñ  slot(u64   ):The newly set slot value.



Example  Notification


{
"jsonrpc":"2.0",
"method":"slotNotification", "params":{
"result":{
"parent":75,
"root":44,
¡¡¡¡"slot":76 ×Ó£¬
¡¡¡¡"subscription":0 }

2025/2/2701:22                                                                                               Helius Docs


slotUnsubscribe
Unsubscribe from  slot  notifications


Parameters

integer (required)

The subscription ID to cancel.




Result

Returns a|<bool>    indicating whether the  unsubscribe  operation was successful:

¡ñ    true :Unsubscribe  operation  succeeded.
¡ñ  false  :Unsubscribe  operation  failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


slotsUpdatesSubscribe
Subscribe to receive a notification from the validator on a variety of updates on every slot

¡¡¡¡¡¡¡¡



Parameters


None

No parameters are required for this method.




Result

Returns an   <integer>    representing the  subscription  ID.This  ID is required to unsubscribe.

¡¡¡¡¡¡¡¡


Code  Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡


Notification Format

The notification is an object with the following fields:

¡ñ err(string    I    undefined     ):The error message.Present only if the update type is "dead" .
¡¤    parent(u64|undefined          ):The parentslot.Present only if the update type is "createdBank" .
¡ñ   slot(u64)         :The   updated   slot.
¡ñ stats(object           |undefined):Present only if the update type is "frozen".
Contains the following fields:
o    maxTransactionsPerEntry)( u64)
o    numFailedTransactions(u64)
o  [numSuccessfulTransactions (  u64)
o  numTransactionEntries(u64)
o             timestamp(i64):The   Unix  timestamp  of  the  update  in  milliseconds.
¡ñ   type(string           ):The   type   of   update.Possible   values:
o  "firstShredReceived"
o  "completed"
	
o  "createdBank"
	
¡£  "frozen"
	
¡£   "dead"
O     "optimisticConfirmation"
O          "root"

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                                             Helius Docs



Example Notification

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


slotsUpdatesUnsubscribe
Unsubscribe  from  slot-update  notifications



Parameters

number (required)

The subscription ID to cancel.




Result

Returns a|<bool>    indicating whether the  unsubscribe  operation was successful:

¡ñ    true :Unsubscribe  operation  succeeded.
¡ñ  false  :Unsubscribe  operation  failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


voteSubscribe
Subscribe to receive notifcation anytime a new vote is observed in gossip.These votes are pre-consensus therefore there is no guarantee these votes will enter the ledger.

¡¡¡¡¡¡¡¡


Parameters


None

No parameters are required for this method.




Result

Returns an   <integer>    representing the  subscription  ID.This  ID is required to unsubscribe.




Code  Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡


Notification Format

The notification is an object with the following fields:

¡ñ   hash(string      ):The vote hash.
¡ñ slots(array       ):The slots covered by the vote,as an array of u64  integers.
¡ñ timestamp(i64          |null):The timestamp of the vote.
¡ñ  signature(string    ):The signature of the transaction containing this vote.
¡ñ  votePubkey(string ):The public key of the vote account,as a base-58 encoded string.



Example Notification

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


voteUnsubscribe
Unsubscribe from vote  notifications



Parameters

integer (required)

The subscription ID to cancel.




Result

Returns a|<bool>    indicating whether the  unsubscribe  operation was successful:

¡ñ    true :Unsubscribe  operation  succeeded.
¡ñ  false  :Unsubscribe  operation  failed.




Code Sample Request Example:
¡¡¡¡¡¡¡¡

Response Example:

2025/2/2701:22                                                                                                    Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs



Common Error Codes
Learn about common RPC error messages and potential solutions.If you experience persistent  issues,contact  Helius  support.

When interacting with  Helius  RPCendpoints,you  may encounter the following standard HTTPerror codes that indicate the status of your requests:

Error Code            Error Message         Description                  Potential Solution


401	

Unauthorized	
Invalid API key or
restricted access due to Access Control Rules.	Ensure your API key is correct and has the necessary
permissions.





429	




Too Many Requests	

Exceeded Rate Limits.

Check "Rate Limited
Requests"graph in your
RPC metrics dashboard in Usage section.	Implement rate
limiting from your  side or upgrade the plan for increased  ratelimits.
Check our Pricing&
Rate limits page for details.


500	
Internal Server Error	
Generic server-side issue	Contact Helius support for
assistance



503	


Service Unavailable	
Server is temporarily overloaded or under
maintenance	Retry the request  after some time,if the issue persists contact Helius
support.




504	



Gateway Timeout	Client did not receive a
timely response from the server.

This could indicate network issues.	
Check your network connection and
retry,if the issue persists contact  Helius support.


2025/2/2701:22                                                                                                             Helius Docs





Data Streaming

2025/2/2701:22                                                                             Helius Docs


Geyser(Yellowstone)
Highly configurable real-time data streams.



What are gRPC streams?

Geyser orgRPC streams provide the fastest and most efficient way to stream Solana data  directly to your backend.With gRPC,you can subscribe to blocks,slots,transactions,and   account updates.It is highly configurable.You can filter or limit each subscription.It allows the client-server to create new subscriptions or cancel existing ones immediately.

To learn more,please read the examples provided in the source  repo.

¡¡¡¡¡¡¡¡



Subscribe Request

In  the  subscribe  request,you  need  to  include  the  following:

¡¡commitment  :Specifies  the  commitment  level,which  can  be  processed,confirmed,or finalized.

accounts_data_slice:An                 array                 of                 objects   {  o  f  f  s  e  t  :  u  i  n  t  6  4  ,  l  e  n  g  t  h  :  u  i  n  t  6  4×Ó
that allows you to receive only the required data slices from accounts.

	ping :An optional boolean.Some cloud providers(e.g.,Cloudflare)close idle streams.To keep the connection alive,set this to true.The server willrespond with a Pong message    every 15 seconds,avoiding the need to resend flters.

Next,you'll  need to  specify the flters for the data you want to subscribe to,such  as accounts,blocks,slots,or       transactions.

2025/2/2701:22                                                                                               Helius Docs




¡Ì  Slots
filter   by    commitment     -By default,slots  are sent for all  commitment  levels.
With this flter,you can choose to receive only the selected commitment level.



¡ÌAccounts
account   :Matches any  public key from the provided array.
¡¡owner  :The account owner's public key.Matches any public key from the provided  array.
¡¡filters       :Similar to the filters  in getProgramAccounts.  This is an array of 	dataSize    and/or  Memcmp filters.Supported   encoding   includes   bytes ,   	base58 ,and     base64.
If all fields are empty,allaccounts are  broadcasted.Otherwise:
¡ñ Fields operate as a logical AND.
¡¤Values within arrays act as a  logical OR(except within filters,which operate as a logical AND)


¡ÌTransaction

vote  :Enable or disable the  broadcast of vote transactions.
failed     :Enable or disable the broadcast of failed transactions.
signature    :Broadcast only transactions  matching the specified signature.
¡¡account       include:Filter transactions that  involve any account from the provided  list.
¡¡account     exclude:Exclude transactions that  involve  any  account from the provided  list(opposite  of  account      include ).
		account   required    :Filter  transactions  that  involve all accounts from the provided list(all accounts must be used).


2025/2/2701:22                                                                                               Helius Docs


If all felds are left empty,all transactions are broadcasted.Otherwise: ¡¤Fields operate as a logical AND.
¡¤Values within arrays are treated as a logical OR.


¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡


¡Ì  Entries
Currently,there are no filters available for entries;all entries are broadcasted.



Examples

¡ÌTypescript   Slot   Subscription
The following code examples subscribe to slot updates and include a ping to the gRPC server to keep the connection alive.


2025/2/2701:22                                                                                     Helius Docs



import       Client,{
CommitmentLevel,  SubscribeRequest,
¡¡¡¡SubscribeRequestFilterAccountsFilter,   ×Ó from"@triton-one/yellowstone-grpc";
const  GRPC_URL  ="add-geyser-url"; const  X_TOKEN  ="add-x-token";
const           PING_INTERVAL_MS           =30_000;//30s
async    function    main(){ //Open     connection.
const  client  =new  Client(GRPC_URL,X_TOKEN,{
"grpc.max_receive_message_length":64*1024*1024,//64M:
×Ó);

//Subscribe      for      events
const    stream     =await    client.subscribe();

//Create                                       'error`/`end`handler
const     streamClosed      =new      Promise<void>((resolve,reject)=>{
stream.on("error",(error)=>{ reject(error);
¡¡¡¡stream.end(); ×Ó);
stream.on("end",()=>{ resolve();
×Ó);
stream.on("close",()=>{ resolve();
×Ó);
×Ó);
//Handle    updates
stream.on("data",(data)=>{
t(da. s[;slot"){
console.log(
'${ts.toUTCString()}:Received         slot         update:${data.slot
);
×Ó else        if(data.pong){
console.log(`${ts.toUTCString()}:Processed      ping      response
}
×Ó);
//Example    subscribe    request.   //Listen    to    all    slot    updates.
const             slotReauest:SubscribeReauest              =5

2025/2/2701:22                                                                                 Helius Docs



slots:S
slot:{filterByCommitment:true               },
×Ó£¬
commitment:CommitmentLevel.CONFIRMED,
//Required,but   unused   arguments accounts:{ ×Ó£¬
accountsDataSlice:[], transactions:{},
transactionsStatus:{×Ó£¬ blocks:{ ×Ó£¬
blocksMeta:{  ×Ó£¬
¡¡¡¡entry:{3, };
//Send  subscribe  request
await     new     Promise<void>((resolve,reject)=>{ stream.write(slotRequest,(err)=>{
if(err     ===null     Il     err     ===undefined){
¡¡¡¡resolve(); }else    {
¡¡¡¡reject(err); }
×Ó);
×Ó).catch((reason)=>{
console.error(reason);
¡¡¡¡throw  reason; ×Ó);
//Send  pings  every  5s to  keep  the  connection  open const  pingRequest:SubscribeRequest  =S
ping:{id:1},
//Required,but   unused   arguments
accounts:{  ×Ó£¬
accountsDataSlice:[], transactions:{    ×Ó£¬
transactionsStatus:{}, blocks:{},
blocksMeta:{  ×Ó£¬
entry:{3,   slots:{3,
e;tInterval(async()=>{
await     new     Promise<void>((resolve,reject)=>{ stream.write(pingRequest,(err)=>{
if(err     ===null     Il     err     ===undefined){
¡¡¡¡resolve(); }else    {

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


import      Client,{
CommitmentLevel,  SubscribeRequest,
¡¡¡¡SubscribeRequestFilterAccountsFilter    ×Ó from"@triton-one/yellowstone-grpc"; import     bs58     from     'bs58';
const GRPC_URL ="add-geyser-url"; const X_TOKEN ="add-x-token";
const        PING_INTERVAL_MS        =30_000;//30s
//Add   this   utility   function   to    process   the   transaction   object
function      convertBuffers(obj:any):any      {    if(obj     ===null     Il     obj     ===undefined){
return    obj;
}
//Handle   Buffer   objects
if(obj.type                    ==='Buffer'&&Array.isArray(obj.data)){ return   bs58.encode(new   Uint8Array(obj.data));
}

//Handle           arrays
if(Array.isArray(obj)){
return    obj.map(item     =>convertBuffers(item));
}
//Handle    objects
if(typeof             obj              ==='object'){   //Handle    Uint8Array    directly
if(obj      instanceof      Uint8Array){ return    bs58.encode(obj);
}
const    converted:any    ={};
for(const          [key,value]of          Object.entries(obj)){  //Skip  certain   keys  that  shouldn't   be  converted
if(key          ==='uiAmount'Il          key          ==='decimals'Il          key          ==='
converted[key]=value;
×Ó else
converted[key]=convertBuffers(value);







×Ó





async  function   main()S //Open   connection.
const client =new Client(GRPC_URL,X_TOKEN,{
"grpc.max_receive_message_length":1024*1024*1024,//6
×Ó);

//Subscribe     for     events
const   stream    =await    client.subscribe();

//Create                                       `error`/'end`handler
const    streamClosed     =new    Promise<void>((resolve,reject)=>{
stream.on("error",(error)=>S
reject(error);
stream.end();
×Ó);
stream.on("end",()=>{ resolve();
×Ó);
stream.on("close",()=>{ resolve();
×Ó);
×Ó);
//Handle   updates
stream.on("data",(data)=>{ let   ts   =new   Date();     if(data){
if(data.transaction){
const    tx    =data.transaction;
//Convert   the    entire   transaction   object const    convertedTx    =convertBuffers(tx);
//If  you  want  to  see  the  entire  converted  transaction:
¡¡¡¡console.log('${ts.toUTCString()}:Received           update:${JS }
else  S
console.log('${ts.toUTCString()}:Received          update:${da
tream.end();
×Ó else         if(data.pong){
console.log('${ts.toUTCString()}:Processed    ping    response
×Ó
×Ó);
//Example   subscribe   request.
const   request:SubscribeRequest   ={




commitment:CommitmentLevel.PROCESSED, accountsDataSlice:[],
¡ÌSubscpibegRequestsiwith,all    filters
transactions:{
client:{
vote:false, failed:false,
"grpc":{
"filters":{
"accounts":{ "max":1,
"any":false,
"account_max":10,
"account_reject":["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9S: "owner_max":10,
¡¡¡¡"owner_reject":["11111111111111111111111111111111"] s£¬lots":{
¡¡¡¡"max":1 ×Ó£¬
"transactions":{ "max":1,
"any":false,
"account_include_max":10,
"account_include_reject":["TokenkegQfeZyiNwAJbNbGKPFX( "account_exclude_max":10,
¡¡¡¡"account_required_max":10 ×Ó£¬
"blocks":{
"max":1,
"account_include_max":10,   "account_include_any":false,
"account_include_reject":["TokenkegQfeZyiNwAJbNbGKPFX( "include_transactions":true,
"include_accounts":false,
¡¡¡¡"include_entries":false ×Ó£¬
"blocks_meta":{
¡¡¡¡"max":1 ×Ó£¬


¡¡¡¡×Ó }
×Ó
transactionsStatus:{},
entry:{      ×Ó£¬

2025/2/2701:22                                                                                               Helius Docs


You   c          e;tInterval(async()=>S
await                  new                  Promise<void>((resolve,reject)=>{
stream.write(pingRequest,(err:null      I      undefined)=>{      ion
if(err     ===null     Il     err     ===undefined){
¡¡¡¡resolve(); ×Ó else        {
reject(err);
×Ó
×Ó);
×Ó).catch((reason)=>{  console.error(reason); throw         reason;
×Ó);
×Ó£¬PING_INTERVAL_MS);

await    streamClosed;
×Ó
main();

2025/2/2701:22                                                                                          Helius Docs



Getting Started with Yellowstone gRPC(Geyser Plugin)
A comprehensive setup guide for connecting to Solana's real-time data stream using Yellowstone gRPC.



Introduction

With Dedicated Node,you can leverage the powerful Yellowstone gRPCinterface to receive real-time updates about on-chain events.The Geyser plugin provides a high- performance,low-latency stream of Solana blockchain data.



What isgRPCand Why Use It?

gRPC(Google  Remote  Procedure Call)is a modern,high-performance framework that
enables client and server applications to communicate transparently.For Solana blockchain data streaming,gRPC offers several key advantages:

1.  Language Agnostic:Using  Protocol  Buffers(protobuf),gRPC  allows  you to write  clients in multiple programming languages while maintaining type safety and consistency.
2.  Binary Protocol:Unlike JSON-based REST APls,gRPC uses a binary protocol that is more efficient in terms of bandwidth and parsing overhead.
3.  Bi-directional Streaming:gRPC  supports  bi-directional  streaming,perfect  for  receiving continuous updates about blockchain events.
4. Type Safety:The protobufschema ensures type safety across all supported languages.



Getting Started

Your Helius Dedicated Node exposes the Yellowstone gRPCinterface on port 2053.The service provides various subscription options for different types of blockchain data:

¡ñ  Account  updates

2025/2/2701:22                                                                                               Helius Docs


¡¤Slot    updates
¡¤Transaction     information
¡ñ Block data ¡¤Entry    data


Installation&Project Setup

Before diving into specific examples in the following sections,let's set up our development environment for each supported language:


TypeScript/JavaScript

1.Create a new project:

¡¡¡¡¡¡¡¡

2.Install  dependencies:

¡¡¡¡¡¡¡¡

3.Create  TypeScript  confguration:

¡¡¡¡¡¡¡¡


Rust

1.  Create a new project:

¡¡¡¡¡¡¡¡

2. Add to    Cargo.toml :

2025/2/2701:22                                                                                     Helius Docs



¡¡¡¡¡¡¡¡


Go

1.Create a new project:

¡¡¡¡¡¡¡¡

2.Initialize Go module:

¡¡go   mod   init  go-yellowstone-client 3.Create project structure:
¡¡¡¡¡¡¡¡

4.Install required dependencies:

¡¡¡¡¡¡¡¡

5.Your  go.mod should look similar to this:

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

These setups provide the foundation for the examples in the following sections.Each subsequent guide willbuild upon this basic setup to demonstrate specific monitoring capabilities.



Available Subscriptions

The Yellowstone gRPCinterface allows you to subscribe to various types of data:


1.Account Updates

Subscribe to changes in account data,including:

¡¤Account  balance  changes ¡ñ  Data  modifcations
¡¤Ownership    changes
¡¤Creation/deletion     events


2.Slot Updates




Monitor slots to  receive  notifications  about:

¡ñ  New  slots
¡¤Confirmed      slots
¡ñ  Finalized  slots
¡¤Parent   slot   relationships


3.Transaction Information

Stream transactions to receive updates about:

¡ñ  Transaction  signatures
¡ñ  Transaction  status
¡¤Success/failure       information
¡ñ  Account  involvement


4.Block Data

Access comprehensive block   information:

¡ñ  Block  metadata
¡ñ  Included  transactions ¡¤Account      updates
¡ñ   Entry   information


5.Entry Data

Track low-level  entry  information:

¡ñ  Entry  indexes
¡ñ  Transaction  counts
¡ñ  Entry  hashes

2025/2/2701:22                                                                                               Helius Docs




Commitment Levels

Yellowstone gRPC supports three commitment levels:

¡ñ[ PROCESSED :Fastest,but may include unconfrmed data
¡ñ   CONFIRMED  :Balance      between      speed      and      finality
¡ñ  FINALIZED :Highest level of finality

Choose the appropriate commitment level based on your application's requirements for data finality versus latency.


Next Steps

Continue to the following sections to learn about the core subscription types in Yellowstone gRPC:

1.Account  Monitoring-Monitor account  updates and changes
2.Transaction Monitoring-Track transactions and their status
3.Slot  and  Block  Monitoring-Monitor  slots,blocks,and  their  metadata 4.Entry Monitoring-Track low-level block entries and execution

Each guide includes complete working examples in TypeScript,Rust,and Go,along with advanced filtering patterns and best practices.

2025/2/2701:22                                                                                               Helius Docs


Account Monitoring
Real-time monitoring of Solana account updates with fltering options and reliable reconnection  handling.



Account Monitoring with Yellowstone gRPC

This guide demonstrates how to use Yellowstone gRPC to  monitor  account updates  on
Solana.You'll learn to use different account filtering options and process account data with reliable  reconnection  handling.


TypeScript Implementation

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


private       async        write(req:SubscribeRequest):Promise<void>{
return       new       Promise((resolve,reject)=>{
this.stream.write(req,(err:any)=>err                             ?reject(err):reso
×Ó);
×Ó
private      async      reconnect(subscribeRequest:SubscribeRequest):Promise<
if(this.reconnectAttempts              >=this.maxReconnectAttempts){
console.error("Max    reconnection    attempts    reached");
¡¡¡¡¡¡return; }
this.reconnectAttempts++;
console.log('Reconnecting...Attempt                ${this.reconnectAttempts}`);

setTimeout(async()=>{ try  {
await                    this.connect(subscribeRequest);
×Ó catch(error){
console.error("Reconnection                      failed:",error); await       this.reconnect(subscribeRequest);
}
¡¡¡¡¡¡×Ó£¬this.reconnectInterval*Math.min(this.reconnectAttempts,5)); ×Ó
private      startPing():void      {
setInterval(()=>{
if(this.isConnected){

ping:{id:1},   accounts:{},
accountsDataSlice:[],
transactions:{}, blocks:{ ×Ó£¬
blocksMeta:{, entry:{,
slots:{ ×Ó£¬
¡¡¡¡¡¡transactionsStatus:{3, ×Ó).catch(console.error);
×Ó
×Ó£¬30000);
×Ó
private      handleData(data:any):void      {
try  {
const             processed             =this.processBuffers(data); this.dataHandler(processed);
}catch(error){

2025/2/2701:22                                                                             Helius Docs


console.error("Error              processing              data:",error);
¡¡¡¡¡¡×Ó ×Ó
private      handleError(error:any):void      {
console.error("Stream                error:",error); this.isConnected      =false;

private    handleDisconnect(subscribeRequest:SubscribeRequest):void    S
console.log("Stream    disconnected"); this.isConnected      =false;
¡¡¡¡¡¡this.reconnect(subscribeRequest); }
private        processBuffers(obj:any):any         {
if(!obj)return           obj;
if(Buffer.isBuffer(obj)Il       obj        instanceof        Uint8Array){
return      bs58.default.encode(obj);

if(Array.isArray(obj)){
return             obj.map(item              =>this.processBuffers(item));


return     Object.fromEntries(
¡¡¡¡¡¡Object.entries(obj).map(([k,v])=>[k,this.processBuffe );
×Ó
return    obj;
¡¡¡¡¡¡×Ó ×Ó
//Account   monitoring   implementation async   function   monitorAccounts(){
const    manager     =new    GrpcStreamManager( "your-dedicated-node-url:2053",
"x-token",
¡¡¡¡¡¡handleAccountUpdate );
//Create  subscription  request  with  USDC  token  mint  account const  subscribeRequest:SubscribeRequest  =S
accounts:S
accountSubscribe:{
account:["EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"] owner:[],
¡¡¡¡¡¡filters:[] ×Ó

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

Account Subscription Options


1.Monitor Specific Accounts

¡¡¡¡¡¡¡¡


2.Monitor   by    Program(Owner)

2025/2/2701:22                                                                                               Helius Docs













¡¡¡¡¡¡¡¡


3.Monitor with Data Filters

¡¡¡¡¡¡¡¡


4.Monitor with Data Slices

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡



Account Data Structure

The account  update  data  includes:

1.  Basic Information:
¡ñ   Pubkey(account   address) ¡¤Owner(program         ID)
Lamports(balance)
¡¤Executable       flag
¡ñ  Rent  epoch
2.  Account Data:
¡ñ   Raw  data(base58  encoded)
¡ñ   Datalength
¡¤Write    version
3.  Update Metadata:
¡ñ  Slot   number
¡¤Startup    flag(indicates    initial    load)


Rust Implementation

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius  Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius  Docs


let(mut         subscribe_tx,mut         stream)=self.client.subscribe_with_r
self.is_connected      =true;
self.reconnect_attempts     =0;
while        let         Some(message)=stream.next().await        {
match   message   { Ok(msg)=>{
match    msg.update_oneof    {
Some(UpdateOneof::Account(account))=>{
if   let   Some(account_info)=account.account   { self.handle_account_update(account.slot,
×Ó

Some(UpdateOneof::Ping(_))=>S subscribe_tx
.send(SubscribeRequest S
ping:Some(SubscribeRequestPing    {id:
¡¡¡¡¡¡..Default::default() ×Ó)
¡¡¡¡¡¡¡¡¡¡.await?; ×Ó
Some(UpdateOneof::Pong(_))=>{3//Ignore            pong             r
_=>{
println!("Other       update       received:{:?}",msg);
¡¡¡¡¡¡×Ó 2
×Ó
Err(err)=>{
error!("Error:{:?}",err);
self.is_connected      =false;
Box::pin(self.reconnect(request.clone())).await?; break;
¡¡¡¡¡¡×Ó ×Ó
2
¡¡¡¡¡¡0k(()) ×Ó
///Attempts  to  reconnect  when   the  connection  is  lost ///
/ / / ·Ç Arguments
///*'request`-The        original         subscription        request         to         reestablish        th async    fn      reconnect(&mut     self,request:SubscribeRequest)->Result<()
if   self.reconnect_attempts    >=self.max_reconnect_attempts    {
println!("Max   reconnection   attempts   reached"); return    Ok(());

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

Go lmplementation

2025/2/2701:22                                                                                                             Helius Docs

2025/2/2701:22                                                                                               Helius Docs



package main
import(
"context"
"crypto/tls"
"encoding/hex" "fmt"
"log"  "sync" "time"
pb"github.com/rpcpool/yellowstone-grpc/examples/golang/proto" "github.com/mr-tron/base58"
"google.golang.org/grpc"
"google.golang.org/grpc/credentials"
¡¡¡¡¡¡"google.golang.org/grpc/metadata" )
type   GrpcStreamManager  struct  {

mu	sync.Mutex
conn	*grpc.ClientConn
client	pb.GeyserClient
stream	pb.Geyser_SubscribeClient
isConnected	bool
reconnectAttempts	int
maxReconnectAttempts   int

reconnectInterval
dataHandler xToken
×Ó


time.Duration
func(*pb.SubscribeUpdate) string

func     NewGrpcStreamManager(endpoint     string,xToken     string,dataHandler     fun //Create   gRPC   connection   with    interceptor   for   x-token
ctx        :=metadata.NewoutgoingContext( context.Background(),
¡¡¡¡¡¡metadata.New(map[string]string{"x-token":xToken}), )
//Configure      TLS
config          :=&tls.Config{
¡¡¡¡¡¡InsecureSkipVerify:true, }
conn,err       :=grpc.DialContext(ctx,endpoint,
grpc.WithTransportCredentials(credentials.NewTLS(config)), grpc.WithInitialWindowSize(1<<30).

2025/2/2701:22                                                                                               Helius   Docs



grpc.WithInitialConnWindowSize(1<<30), grpc.WithDefaultCall0ptions(
grpc.MaxCallSendMsgSize(64*1024*1024), grpc.MaxCallRecvMsgSize(64*1024*1024),
¡¡¡¡¡¡), )
if err  !=nil  {
return         nil,fmt.Errorf("failed         to         connect:%v",err)
×Ó
return  &GrpcStreamManager{
conn:                                 conn,
client:                         pb.NewGeyserClient(conn),
isConnected:                     false,
reconnectAttempts:          0,
maxReconnectAttempts:10,
reconnectInterval:      5*time.Second, dataHandler:                     dataHandler,
xToken:                            xToken,
¡¡¡¡¡¡×Ó£¬nil ×Ó
func(m      *GrpcStreamManager)Connect(ctx       context.Context,req       *pb.Subscrib
m.mu.Lock()
defer    m.mu.Unlock()
log.Println("Attempting        to        connect...")
//Add    x-token    to    context
ctx=metadata.NewOutgoingContext( ctx,
¡¡¡¡¡¡metadata.New(map[string]string{"x-token":m.xToken}), )
stream,err                :=m.client.Subscribe(ctx) if    err     !=nil     {
log.Printf("Failed          to           subscribe:%v",err) return          m.reconnect(ctx,req)
×Ó
if    err    :=stream.Send(req);err    !=nil    {
log.Printf("Failed       to        send       request:%v",err)
return          m.reconnect(ctx,req)
×Ó

m.stream    =stream
m.isConnected      =true
m.reconnectAttempts      =0

2025/2/2701:22                                                                                               Helius Docs


log.Println("Connection established")
//Start      ping      goroutine
go      func(){




for  {
select
case



{
<-ctx.Done():

return
case <-ticker.C:
if    !m.isConnected    {
¡¡¡¡¡¡return 2
pingReq      :=&pb.SubscribeRequest{
¡¡¡¡¡¡Ping:&pb.SubscribeRequestPing{Id:1}, ×Ó
if       err        :=m.stream.Send(pingReq);err        !=nil         {



¡¡¡¡¡¡2 ×Ó
2
()
//Process      updates
go      func(){ for  {
update,err          :=m.stream.Recv() if  err   !=nil   {
log.Printf("Stream   error:%v",err) m.handleDisconnect(ctx,req)
¡¡¡¡¡¡return ×Ó
¡¡¡¡¡¡m.dataHandler(update) ×Ó
×Ó()

return      nil
×Ó
func(m      *GrpcStreamManager)reconnect(ctx       context.Context,req       *pb.Subscr
if   m.reconnectAttempts    >=m.maxReconnectAttempts    {
return    fmt.Errorf("max     reconnection     attempts     reached")
×Ó



¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


log.Printf("     Pubkey:%s\n",pubkey) log.Printf(" Owner:%s\n",owner)
log.Printf("           Lamports:%d\n",account.GetAccount().GetLamports()
log.Printf(" Executable:%v\n",account.GetAccount().GetExecutab
log.Printf("   Data        Length:%d\n",len(account.GetAccount().GetDat
if                     len(account.GetAccount().GetData())>0{
log.Printf("   Data(hex):%s\n",hex.EncodeToString(account.G
¡¡¡¡¡¡×Ó ×Ó
}
func       main(){
ctx           :=context.Background()

//Create   manager   with   data   handler   and   x-token manager,err         :=NewGrpcStreamManager(
"your-grpc-url:2053", "your-x-token",
¡¡¡¡¡¡handleAccountUpdate, )
if  err   !=nil   {   log.Fatal(err)
}
defer      manager.Close()
//Create    subscription    request    for     USDC    mint    account
accounts                   :=make(map[string]*pb.SubscribeRequestFilterAccounts) accounts["client"]=&pb.SubscribeRequestFilterAccounts{
¡¡¡¡¡¡Account:[]string{"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"} ×Ó
commitment  :=pb.CommitmentLevel_CONFIRMED req         :=&pb.SubscribeRequest{
Accounts:        accounts,
¡¡¡¡¡¡Commitment:&commitment, ×Ó
//Connect    and    handle    updates
if        err        :=manager.Connect(ctx,req);err        !=nil        {
log.Fatal(err)
}
//Keep    the    main    goroutine    running select   {}
}
Transaction Monitoring

2025/2/2701:22                                                                                               Helius Docs


Track Solana transactions in real-time with program filtering and detailed execution data.



Transaction Monitoring with Yellowstone gRPC

This guide demonstrateshow to use Yellowstone gRPC to monitor transactions on Solana. You'lllearn how to track transactions in real-time with fltering options and reliable
reconnection  handling.


TypeScript Implementation

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs



×Ó
private     async       reconnect(subscribeRequest:SubscribeRequest):Promise<
if(this.reconnectAttempts              >=this.maxReconnectAttempts){
console.error("Max       reconnection       attempts       reached");
¡¡¡¡¡¡return; ×Ó
this.reconnectAttempts++;
console.log('Reconnecting...Attempt                ${this.reconnectAttempts}`);

setTimeout(async()=>{ try  {
await                    this.connect(subscribeRequest);
×Ó catch(error){
console.error("Reconnection                      failed:",error); await                this.reconnect(subscribeRequest);
×Ó
¡¡¡¡¡¡×Ó£¬this.reconnectInterval*Math.min(this.reconnectAttempts,5)); ×Ó
private        startPing():void        {
setInterval(()=>{
if(this.isConnected){
this.write({
ping:{id:1},
accounts:{  ×Ó£¬
accountsDataSlice:[], transactions:{3,
blocks:S ×Ó£¬
blocksMeta:{  ×Ó£¬ entry:{      ×Ó£¬
slots:{,
transactionsStatus:{      ×Ó£¬
¡¡¡¡¡¡×Ó).catch(console.error); ×Ó
¡¡¡¡¡¡×Ó£¬30000); ×Ó
private      handleData(data:any):void      {
try S
const             processed             =this.processBuffers(data); this.dataHandler(processed);
×Ó catch(error){
console.error("Error                     processing                     data:",error);
×Ó
×Ó

2025/2/2701:22                                                                                               Helius Docs


private    handleError(error:any):void    {
console.error("Stream           error:",error); this.isConnected          =false;
×Ó
private         handleDisconnect(subscribeRequest:SubscribeRequest):void         S
console.log("Stream         disconnected"); this.isConnected          =false;
this.reconnect(subscribeRequest);
×Ó
private           processBuffers(obj:any):any            {
if(!obj)return         obj;
if(Buffer.isBuffer(obj)Il     obj     instanceof     Uint8Array){
return  bs58.default.encode(obj);
}
if(Array.isArray(obj)){
return         obj.map(item         =>this.processBuffers(item));
}
if(typeof         obj          ==='object'){ return  Object.fromEntries(
¡¡¡¡¡¡Object.entries(obj).map(([k,v])=>[k,this.processBuffe );
return  obj;
¡¡¡¡¡¡} ×Ó
//Transaction      monitoring      implementation async      function       monitorTransactions(){
const  manager  =new  GrpcStreamManager( "your-grpc-url:2053",
"your-x-token",
¡¡¡¡¡¡handleTransactionUpdate );
//Create      subscription       request       for      monitoring       program       transactions
const     subscribeRequest:SubscribeRequest      =S
transactions:{
accountInclude:["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
accountExclude:[],
accountRequired:[],
vote:false,
failed:false,
signature:undefined
×Ó£¬
¡¡¡¡¡¡commitment:CommitmentLevel.CONFIRMED, ×Ó£»

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


if(Array.isArray(message.accountKeys)){
message.accountKeys.forEach((key:Uint8Array,index:numb try{
console.log(  ${index}:${bs58.default.encode(ke
×Ó catch(error){
console.log(  ${index}:[Unable to encode key]`)
×Ó
¡¡¡¡¡¡×Ó); }

//TODO:Add instructions processing logic if(Array.isArray(message.instructions)){
console.log('\n===Instructions    ===');
message.instructions.forEach((ix:any,index:number)=> try S
console.log('\nInstruction      ${index+1}:');
console.log(     Program:${bs58.default.encode(mes console.log(  Accounts:${ix.accounts.map((idx:
bs58.default.encode(message.accountKeys[idx])
)}`);
if(ix.data){
console.log(  Data:${bs58.default.encode(ix
×Ó
×Ó catch(error){
console.log(   [Unable to decode instruction ${in
×Ó
×Ó);
×Ó

//TODO:Add inner instructions processing logic
if(txInfo.meta?.innerInstructions?.length>0){
console.log('\n===Inner  Instructions  ===');
txInfo.meta.innerInstructions.forEach((inner:any,index:
console.log(\nInner   Instruction   Set   ${index+1}:'); inner.instructions.forEach((ix:any,i:number)=>{
tryS console.log(  Instruction ${i+1}:');
console.log(    Program:${bs58.default.enco
console.log(    Accounts:${ix.accounts.map( bs58.default.encode(message.accountKeys[i
)});
if(ix.data){
console.log(    Data:${bs58.default.enc
×Ó
×Ó catch(error){
console.log(           [Unable   to   decode   instructio

2025/2/2701:22                                                                                 Helius Docs


5
¡¡¡¡¡¡×Ó); 3);
¡¡¡¡¡¡? 2
console.log('\n'+'='.repeat(50)+'\n');
¡¡¡¡¡¡×Ó ×Ó
//Start      monitoring
monitorTransactions().catch(console.error);

Transaction Subscription Options


1.Monitor Program Transactions

¡¡¡¡¡¡¡¡


2.Monitor  Multiple  Programs

2025/2/2701:22                                                                             Helius Docs



¡¡¡¡¡¡¡¡


3.Monitor   All   Transactions

¡¡¡¡¡¡¡¡


Data Structures

1.  Transaction Update:
¡ñ Slot number(when transaction was processed)
¡ñ    Transaction    signature(unique    identifer)
Transaction message
o  Account   keys  (involved  accounts
¡£Instructions(program   calls   and   data)
o   Recent   blockhash




¡ñ  Transaction  metadata
¡£Status(success/failure)

o  Fee  amount
o  Compute  units  consumed
o Log messages
o   Inner   instructions
o Balance changes
2.  Instruction Details:
¡ñ  Program  ID(program  being  called)
¡¤Account  list(accounts  used  by  instruction) ¡¤Instruction    data(program-specific    data)     ¡¤Inner    instructions(CPI    calls)


Rust Implementation




¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                      Helius Docs



println!("   Status:{  ×Ó",if        meta.err.is_none(){"Success
println!("        Fee:{:?}",meta.fee);
println!("           Compute                    Units:{:?}",meta.compute_units_cons
×Ó
if let Some(transaction_message)=&transaction.transaction S
if   let   Some(message)=&transaction_message.message   { println!("Account        Keys:");
for(i,key)in                         message.account_keys.iter().enumerate
if       let        Ok(pubkey)=Pubkey::try_from(key.as_slice println!("         {}:{}",i,pubkey);
×Ó else    {
println!("    {}:{  ×Ó",i,hex::encode(key));
¡¡¡¡¡¡×Ó ×Ó
println!("Instructions:");
for(i,instruction)in           message.instructions.iter().e
println!("Instruction                     {}:",i+1);
if        let         Some(program_key)=message.account_keys.g
if     let      Ok(pubkey)=Pubkey::try_from(program_ println!("        Program:{}",pubkey);
}else    {
println!("           Program:{3",hex::encode(pro
¡¡¡¡¡¡×Ó ×Ó
println!("        Accounts:");
for     &account_idx     in     &instruction.accounts     {
if         let          Some(key)=message.account_keys.get(a
if      let      Ok(pubkey)=Pubkey::try_from(key. println!("    {}",pubkey);
×Ó else     {
println!("    {3",hex::encode(key));
¡¡¡¡¡¡×Ó ×Ó
}
¡¡¡¡¡¡println!(" Data:{}",hex::encode(&instruction.d ×Ó
if    let     Some(meta)=&transaction.meta    {
if                !meta.log_messages.is_empty(){ println!("Log              Messages:");
for   log   in   &meta.log_messages    {
println!("   {3",log);
×Ó
×Ó

2025/2/2701:22                                                                                               Helius   Docs



println!("Balance            Changes:");
for       i        in        0..meta.pre_balances.len().min(meta.post
let        pre        =meta.pre_balances[i];     let        post        =meta.post_balances[i]; if    pre     !=post    {
if       let       Some(key)=message.account_keys.g if         let          Ok(pubkey)=Pubkey::try_from( println!("          Account               {}:{}->{}
pubkey,
¡¡¡¡¡¡¡¡¡¡pre,post,post.saturating_su ×Ó else   S
println!("          Account               {}:{}->{}
hex::encode(key),
¡¡¡¡¡¡¡¡¡¡pre,post,post.saturating_su ×Ó
¡¡¡¡¡¡} 2
¡¡¡¡¡¡} ×Ó
¡¡¡¡¡¡} ×Ó
¡¡¡¡¡¡×Ó ×Ó
///Creates    a    new    GrpcStreamManager    instance ///
/ / / ·Ç Arguments
///*`endpoint`-The      gRPC      endpoint       URL
///*'x_token`-Authentication    token    for    the     endpoint
async             fn               new(endpoint:&str,x_token:&str)->Result<Arc<Mutex<GrpcS let      interceptor      =InterceptorXToken      {
x_token:Some(x_token.parse().map_err(|e:InvalidMetadataValu
¡¡¡¡¡¡x_request_snapshot:true, ×Ó£»
let            channel             =Endpoint::from_shared(endpoint.to_string())? .connect_timeout(Duration::from_secs(10))
.timeout(Duration::from_secs(10))
.connect() .await
.map_err(lel               anyhow::Error::from(e))?;
let        client         =GeyserGrpcClient::new(
HealthClient::with_interceptor(channel.clone(),interceptor.c
¡¡¡¡¡¡GeyserClient::with_interceptor(channel,interceptor), );
0k(Arc::new(Mutex::new(GrpcStreamManager        {

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs



¡¡¡¡¡¡Ok(()) ×Ó
///Attempts  to  reconnect  when   the  connection  is  lost
///
/ / / ·Ç Arguments
///*'request`-The    original    subscription     request    to     reestablish     th async    fn     reconnect(&mut     self,request:SubscribeRequest)->Result<()
if      self.reconnect_attempts        >=self.max_reconnect_attempts       {
println!("Max   reconnection   attempts    reached"); return    Ok(());
}
self.reconnect_attempts     +=1;
println!("Reconnecting...Attempt                {}",self.reconnect_attempts);
let         backoff=self.reconnect_interval          *std::cmp::min(self.reconn
tokio::time::sleep(backoff).await;
Box::pin(self.connect(request)).await
¡¡¡¡¡¡×Ó }
·Ç[tokio::main]
async     fn     main()->Result<()>{
//Initialize gRPC stream manager
let        manager        =GrpcStreamManager::new(
"your-grpc-url:2053",
¡¡¡¡¡¡"your-x-token", ).await?;

let         mut         manager_lock         =manager.lock().await;

//Create  subscription   request  for  token   program  transactions let  request  =SubscribeRequest  {
transactions:HashMap::from_iter(vec![(
"transactions".to_string(),
SubscribeRequestFilterTransactions    {
vote:Some(false),   failed:Some(false), signature:None,
account_include:vec!["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9S account_exclude:vec![],
¡¡¡¡¡¡account_required:vec![], ×Ó£¬
)]),
commitment:Some(CommitmentLevel::Confirmed           as            i32),

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡

Go lmplementation

2025/2/2701:22                                                                                               Helius Docs



¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius Docs


8rpc. MaxCallRecvMsgSize(64*1024* 1024),
¡¡¡¡¡¡), )
if    err    !=nil    S
¡¡¡¡¡¡return   nil  ,fmt.    Errorf  ( "failed    to    connect:  %v",err) ×Ó
return     &GrpcStreamManager {
conn:                                    conn,
client:                                     pb. NewGeyserClient(conn),
isConnected:                   false,
reconnectAttempts:            0,
maxReconnectAttempts:      10 ,
reconnectInterval:         5  *time.Second,
dataHandler:                   dataHandler,
xToken:                                xToken,
×Ó£¬nil
×Ó
func(m           *GrpcStreamManager)Connect(ctx           context.Context,req           *pb.Subscrib
m.mu.Lock()
defer m.mu.Unlock()
log. Println  ("Attempting  to  connect...")

//Add  x-token  to  context
ctx   =metadata.NewOutgoingContext(
ctx,
metadata. New(map[string]string{     "x-token"  :m.xToken}),
)
!,r nil  .client.Subscribe(ctx)
log. Printf  ( "Failed   to    subscribe: %v",err) return   m.reconnect (ctx,req)
×Ó
if     err      :=stream.Send(req);err      !=nil      {
log.  Printf    ( "Failed     to     send     request:  %v" ,err)
return  m.reconnect(ctx,req)
}

m.stream   =stream
m.isConnected = true
m.reconnectAttempts        = 0
log. Println   ( "Connection     established")
//Start     ping     goroutine

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs



backoff:=m.reconnectInterval *time.Duration(min(m.reconnectAttempt time.Sleep(backoff)
return  m.Connect(ctx,req)
×Ó
func(m      *GrpcStreamManager)handleDisconnect(ctx       context.Context,req       *pb
m.mu.Lock()
defer   m.mu.Unlock ()
if    !m.isConnected    {
¡¡¡¡¡¡return ×Ó
m.isConnected    =false
if    err     :=m.reconnect (ctx,req);err         !=nil         {  log.  Printf   ("Failed        to        reconnect:%v",err)
}
×Ó
func(m    *GrpcStreamManager)   Close ()error        {
m.mu.Lock ()
defer m.mu. Unlock()
m.isConnected      =false
if    m.conn    !=nil    {
return m.conn.Close()
}
return   nil
×Ó
func  min (a,b       int)int       {
if         a<b{     return    a
}
¡¡¡¡¡¡return    b ×Ó
func  handleAccountUpdate (update   *pb. SubscribeUpdate )S
if     tx     :=update.GetTransaction  ();tx       !=nil       { log.  Printf   ("Transaction        Update:\n")
log.Printf(" Slot:%d\n",tx.GetSlot())
txInfo         :=tx.GetTransaction  ()
if   txInfo    !=nil   {
//Print      signature      if      available if   len (txInfo.    GetSignature  ())>0{

2025/2/2701:22                                                                                               Helius Docs


log.Printf("           Signature:%s\n",base58.Encode(txInfo.GetS
}
//Print  if  it's  a  vote  transaction
log.Printf("  Is Vote: %v\n",txInfo.GetIsVote())
//Print  transaction  index
log.Printf(" Transaction Index: %d\n",txInfo.GetIndex())
//Print   transaction   details
if       tx:=txInfo.GetTransaction();tx     != nil  { if     msg     :=tx.GetMessage();msg       !=  nil     {

if








×Ó


accounts      :=msg.GetAccountKeys ();    len  (accounts)> log. Printf ( "   Account Keys:\n")
for  _,acc   :=range   accounts   { if  len(acc)>  0 {
log.Printf("   -%s\n",base58.Encode(ac
¡¡¡¡¡¡×Ó }

}
//Print     status     and     metadata
if      meta      :=txInfo.GetMeta ();meta        != nil    {
log.Printf(" Status:%v\n",meta.GetErr()==nil)
log.Printf("     Fee:%d\n",meta.GetFee())
//Print    log    messages    if    any
if     len(meta. GetLogMessages())>      0  {  log. Printf ( "  Log  Messages:\n")
for       _,msg  :=range          meta.GetLogMessages   (){
log.Printf("   -%s\n",msg)
¡¡¡¡¡¡2 ×Ó
¡¡¡¡¡¡×Ó 2
¡¡¡¡¡¡×Ó }
func boolPtr(b  bool)*bool  { return    &b
}
func  main ()S
ctx         :=context.Background ()
//Create    manager   with   data    handler   and   x-token

2025/2/2701:22                                                                                               Helius Docs


manager,err       :=  NewGrpcStreamManager(
"your-grpc-url:2053", "your-x-token",
handleAccountUpdate,
)if  err  != nil  {    log. Fatal (err)
?
defer    manager.Close ()

//Create     subscription     request     for     token      program     transactions
transactions       :=  make(map[string]*      pb. SubscribeRequestFilterTransaction
transactions[     "transactions"      ]=&    pb. SubscribeRequestFilterTransactions
Vote:                         boolPtr(false),
Failed:                       boolPtr(false),
AccountInclude:        []string{      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623
AccountExclude:       []string{3, AccountRequired:[]string{3,
×Ó
commitment  :=pb.CommitmentLevel_CONFIRMED req     :=&pb. SubscribeRequest  {
Transactions:transactions,
¡¡¡¡¡¡Commitment:      &commitment, }
//Connect    and    handle    updates
if        err        :=manager.Connect(ctx,req);err        !=nil        {
¡¡¡¡¡¡log. Fatal(err) ×Ó
//Keep    the     main    goroutine     running select   {}
}
Entry Monitoring
Stream Solana block entries with transaction batches and execution results



Entry Monitoring with Yellowstone gRPC

This guide demonstrateshow to use Yellowstone gRPC to monitor block entries on Solana. Block entries represent the fundamental units of execution on the Solana blockchain,

2025/2/2701:22                                                                                               Helius Docs


containing transaction batches and their execution results.You'll learn how to track entries with reliable reconnection handling.


TypeScript Implementation

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡



¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


private  handleError(error:   any):   void  { console .error  ("Stream    error:",error); this  .isConnected    =  false  ;
×Ó
private      handleDisconnect(subscribeRequest:     SubscribeRequest ):    void   {
console .log  ( "Stream     disconnected"); this  .isConnected   = false  ;
¡¡¡¡¡¡this  .reconnect  (subscribeRequest); }
private     processBuffers     (obj:    any ):   any  { if(!obj)return         obj;
if(Buffer.isBuffer(obj)Il     obj     instanceof     Uint8Array){
¡¡¡¡¡¡return bs58. default .encode(obj); ×Ó
if(    Array .isArray    (obj)){
return    obj .map(item   =>  this  .processBuffers    (item));
}
if(typeof     obj     ===   'object'   ){    return  Object.fromEntries (
Object .entries    (obj)  .map(([k,v])=>[k,              this  .processBuffe
);
return   obj;
¡¡¡¡¡¡} ×Ó
//Entry      monitoring       implementation
async function monitorEntries(){
const  manager =new  GrpcStreamManager(
"your-grpc-url:2053", "your-x-token",
¡¡¡¡¡¡handleEntryUpdate );
const  subscribeRequest :  SubscribeRequest   ={ entry:{
entrySubscribe:{}    //Subscribe  to all  entries
×Ó£¬
accounts:{},
accountsDataSlice:[],
slots:{},
blocks:{},
blocksMeta:{   ×Ó£¬
transactions:{      ×Ó£¬
transactionsStatus:{×Ó£¬
commitment:  CommitmentLevel. CONFIRMED,

2025/2/2701:22                                                                                      Helius Docs


×Ó£»
console.log ( 'Starting    entry     monitoring...'); await manager.connect(subscribeRequest);
}
function  handleEntryUpdate(data:  any):   void  {
if(   data?.entry)S
const entry  = data.entry;
console.log ( '\n===Entry  Details  ==='); console.log('Slot:${entry.slot}`);
if(   entry .index  !== undefined){
console.log(Entry             Index:${entry.index}`);
}
if(     entry   .numHashes    !==  undefined   ){
¡¡¡¡¡¡console .log ('Number  of Hashes:  ${entry .numHashes}`); ×Ó
if(    entry   .hash){
¡¡¡¡¡¡console.log ( 'Hash: ${entry .hash}`); ×Ó
if(   entry . transactions ?.length  > 0){
console .log ( '\n===Entry    Transactions    ===');
console.log('Transaction                 Count:${entry.transactions.length}`
entry . transactions .forEach((tx:    any,index:    number)=>{ console .log ( '\nTransaction     ${index+    1}: );
if(     tx .signature){
console.log(  Signature:${tx.signature}`);
2
if(   tx .isVote   !==  undefined){
console.log(  Is Vote:${tx.isVote}`);
}
×Ó);
×Ó
if(   entry .tick   !==  undefined){
console .log ( '\n===Tick    Information   ==='); console .log  ('Is    Tick: ${entry .tick}  `);
×Ó

console.log('\n'+'='.repeat(50)+'\n');
¡¡¡¡¡¡×Ó ×Ó

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

Entry Subscription Options


1.Monitor All Entries

¡¡¡¡¡¡¡¡


2.Monitor Filtered Entries

¡¡¡¡¡¡¡¡



Data Structures

1. Entry Update:
¡¤Slot  number(current  slot  being  processed) ¡¤Entry  index(position  in  the  block)
¡ñ  Number  of  hashes(PoH  count)
¡ñ  Entry  hash(unique  identifier)
¡¤Transaction  count(number  of  transactions   in  entry)   ¡¤Transactions   array(detailed    transaction    information)




2.  Transaction Details:
¡¤Signature(unique    transaction    identifier)
¡¤Vote  status(whether  it's  a  vote  transaction)
¡ñ Transaction  message
o Account keys (involved accounts)
o   Header   information
o  Instructions(program  calls  and  data
o  Recent  blockhash
¡ñ  Transaction  metadata
¡£Status(success/failure)

o  Fee  amount
o Balance changes
o Log messages


Rust Implementation

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                            Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


error!("Error:{:?}",err);
self.is_connected          =false;
Box::pin(self.reconnect(request.clone())).await?; break;
¡¡¡¡¡¡} }
2
¡¡¡¡¡¡0k(()) }
///Attempts   to    reconnect    when   the    connection    is    lost
async	fn        reconnect(&mut	self,request:SubscribeRequest)->Result<()
if	self.reconnect_attempts	>=self.max_reconnect_attempts      {
println!("Max     reconnection      attempts     reached");
¡¡¡¡¡¡return   Ok(()); ×Ó
self.reconnect_attempts         +=1;
println!("Reconnecting...Attempt                         {}",self.reconnect_attempts);
let      backoff      =self.reconnect_interval      *std::cmp::min(self.reconn
tokio::time::sleep(backoff).await;
¡¡¡¡¡¡Box::pin(self.connect(request)).await ×Ó
×Ó

ain] fn   main()->Result<()>{
//Initialize gRPC stream manager
let   manager   =GrpcStreamManager::new(
"your-grpc-url:2053",
¡¡¡¡¡¡"your-x-token", ).await?;
let     mut     manager_lock     =manager.lock().await;
//Create    subscription    request    for    entries    only let    request    =SubscribeRequest    {
entry:HashMap::from_iter(vec![( "entry".to_string(),
SubscribeRequestFilterEntry          {,
)]),
commitment:Some(CommitmentLevel::Confirmed    as    i32),
¡¡¡¡¡¡..Default::default() ×Ó£»

2025/2/2701:22                                                                                                             Helius Docs


¡¡¡¡¡¡¡¡

Go lmplementation

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs




func      main()S
ctx           :=context.Background()






¡¡¡¡¡¡handleEntryUpdate, )
if  err   !=nil   S
log.Fatal(err)
×Ó
defer      manager.Close()
//Create     subscription     request     for      entry      monitoring entryFilter                   :=&pb.SubscribeRequestFilterEntry{
Filter:&pb.EntryFilter{ Voting:false,
Failed:false,
¡¡¡¡¡¡×Ó£¬ ×Ó
req         :=&pb.SubscribeRequest{ Entry:              entryFilter,
¡¡¡¡¡¡Commitment:pb.CommitmentLevel_CONFIRMED, ×Ó
//Connect    and    handle    updates
if        err        :=manager.Connect(ctx,req);err        !=nil         {



//Keep    the     main    goroutine     running select    {
}
Slot and Block Monitoring
Monitor Solana slots and blocks with transaction details.



Slot and Block Monitoring with Yellowstone gRPC

2025/2/2701:22                                                                                               Helius Docs


This guide demonstrateshow to use Yellowstone gRPC to monitorslots and blocks on Solana.You'lllearn how to track slot updates,block creation,and block metadata with reliable  reconnection  handling.


TypeScript Implementation

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡



¡¡¡¡¡¡¡¡



¡¡¡¡¡¡¡¡




accounts:{ ×Ó£¬
accountsDataSlice:[], slots:{},
transactions:{×Ó£¬ blocksMeta:{3,
entry:{},
transactionsStatus:{3,
commitment:     CommitmentLevel    . CONFIRMED,
};
console .log ('Starting     block     monitoring...');
console.log ( 'Monitoring blocks for Token Program,System Program,and await manager.connect(subscribeRequest);
}
function  handleBlockUpdate(data:  any):   void  {
if(   data?.block){
const block = data.block;
console .log ( '\n===Block   Details   ===');
console.log('Slot:${block.slot}`);
console .log ('Parent     Slot: ${block.parentSlot}   `); console.log('Blockhash:${block.blockhash}`);
console .log ('Previous    Blockhash:  ${block .previousBlockhash}  `);
if(   block. transactions ?.length  > 0){
console .log ( '\n===Block    Transactions    ===');
console.log('Transaction Count:${block.transactions.length}`
block. transactions .forEach((tx:    any,index:     number)=>{ if(   tx . transaction ?.signatures?.[ 0]){
console .log (  \nTransaction    ${index+    1}:'  );
console.log(  Signature:${tx.transaction.signatures
if(   tx . meta?.err){
console.log(   Status:Failed`);
console.log(      Error:${JSON.stringify(tx.meta.er
×Ó else    {

¡¡¡¡¡¡console.log( }
if(    tx .meta){
console.log(
¡¡¡¡¡¡console.log( ×Ó
}
×Ó);
×Ó


Status:Success );



Fee:${tx.meta.fee}lamports);
Compute        Units:${tx.meta.computeUn

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                                             Helius Docs


¡¡¡¡¡¡¡¡

Subscription    Options


1.Monitor AlI Slots

¡¡¡¡¡¡¡¡


2.Monitor Blocks with Account Filtering

2025/2/2701:22                                                                                               Helius Docs

















¡¡¡¡¡¡¡¡


3.Monitor    Block    Metadata    Only

¡¡¡¡¡¡¡¡


Data Structures

1.  Slot Update:
¡ñ Slot number
¡ñ  Parent  slot
¡ñ  Commitment  status
2.  Block Update:   ¡¤Slot    number
¡ñ  Blockhash




¡ñ  Parent  information
¡ñ Transaction count
¡ñ Account updates
¡ñ  Block entries
¡ñ  Rewards
¡ñ  Timestamp
¡ñ  Block  height

3.  Block Metadata:
¡ñ Basic block information
¡ñ Transaction count
¡ñ  Entry  count
¡ñ  Parent  information


Rust Implementation

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡

Go lmplementation

2025/2/2701:22                                                                                                            Helius Docs



package main
import(
"context"
"crypto/tls"
"fmt"
"log"
"strings"
"sync"
"time"
"github.com/mr-tron/base58"
pb"github.com/rpcpool/yellowstone-grpc/examples/golang/proto" "google.golang.org/grpc"
"google.golang.org/grpc/credentials"
¡¡¡¡¡¡"google.golang.org/grpc/metadata" )
type  GrpcStreamManager  struct  {

mu	sync.Mutex
conn	*grpc.ClientConn
client	pb.GeyserClient
stream	pb.Geyser_SubscribeClient
isConnected	bool
reconnectAttempts	int
maxReconnectAttempts   int

reconnectInterval dataHandler
xToken
}


time.Duration
func(*pb.SubscribeUpdate) string

func     NewGrpcStreamManager(endpoint     string,xToken     string,dataHandler     fun //Create   gRPC   connection   with    interceptor   for   x-token
ctx       :=metadata.NewOutgoingContext( context.Background(),
¡¡¡¡¡¡metadata.New(map[string]string{"x-token":xToken}), )
//Configure      TLS
config          :=&tls.Config{     InsecureSkipVerify:true,
}
conn,err         :=grpc.DialContext(ctx,endpoint,
grpc.WithTransportCredentials(credentials.NewTLS(config)),
grpc.WithInitialWindowSize(1<<30),
grpc.WithInitialConnWindowSize(1<<30), grpc.WithDefaultCallOntions(

2025/2/2701:22                                                                                               Helius Docs



grpc.MaxCallSendMsgSize(64*1024*1024), grpc.MaxCallRecvMsgSize(64*1024*1024),
),
)if err  !=nil  {
return         nil,fmt.Errorf("failed         to         connect:%v",err)
×Ó
return  &GrpcStreamManager{
conn:                                 conn,
client:                         pb.NewGeyserClient(conn),
isConnected:                     false,
reconnectAttempts:          0,
maxReconnectAttempts:10,
reconnectInterval:      5*time.Second, dataHandler:                     dataHandler,
xToken:                            xToken,
¡¡¡¡¡¡×Ó£¬nil }
func(m      *GrpcStreamManager)Connect(ctx       context.Context,req       *pb.Subscrib
m.mu.Lock()
defer    m.mu.Unlock()
log.Println("Attempting        to        connect...")
//Add x-token to context
ctx      =metadata.NewOutgoingContext(
ctx,
¡¡¡¡¡¡metadata.New(map[string]string{"x-token":m.xToken}), )
stream,err                :=m.client.Subscribe(ctx) if  err   !=nil   S
log.Printf("Failed          to          subscribe:%v",err) return          m.reconnect(ctx,req)
×Ó
if   err    :=stream.Send(req);err    !=nil    {
log.Printf("Failed       to        send       request:%v",err)
return          m.reconnect(ctx,req)
×Ó

m.stream    =stream
m.isConnected      =true
m.reconnectAttempts      =0
log.Println("Connection            established")

2025/2/2701:22                                                                                 Helius Docs


//Start    ping    goroutine go    func(){
ticker         :=time.NewTicker(30*time.Second) defer ticker.Stop()
for  {
select  S
case          <-ctx.Done():
return
case    <-ticker.C:
if  !m.isConnected  { return
2
pingReq :=&pb.SubscribeRequest{
Ping:&pb.SubscribeRequestPing{Id:1},
}
log.Printf("Ping failed:%v",err) m.handleDisconnect(ctx,req)
return

¡¡¡¡¡¡×Ó 2
×Ó()
//Process   updates go    func(){
for  {
update,err      :=m.stream.Recv() if  err  !=nil  S
log.Printf("Stream           error:%v",err) m.handleDisconnect(ctx,req)
¡¡¡¡¡¡return ×Ó
¡¡¡¡¡¡m.dataHandler(update) }
×Ó()

return     nil
}
func(m             *GrpcStreamManager)reconnect(ctx              context.Context,req             *pb.Subscr
if m.reconnectAttempts >=m.maxReconnectAttempts {
return  fmt.Errorf("max  reconnection  attempts  reached")
×Ó

m.reconnectAttempts++

2025/2/2701:22                                                                                               Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                                             Helius Docs


¡¡¡¡¡¡×Ó }
func         handleBlockUpdate(block         *pb.SubscribeUpdateBlock){
log.Printf("\n===Block   Details   ===\n") log.Printf("Slot:%d\n",block.GetSlot())
log.Printf("Parent          Slot:%d\n",block.GetParentSlot()) log.Printf("Blockhash:%s\n",block.GetBlockhash())
log.Printf("Previous       Blockhash:%s\n",block.GetParentBlockhash())

if        txs        :=block.GetTransactions();len(txs)>0{ log.Printf("\n===Block  Transactions  ===\n")
log.Printf("Transaction         Count:%d\n",len(txs))

for    i,tx:=range    txs     {
if    txInfo     :=tx.GetTransaction();txInfo     !=nil     {
log.Printf("\nTransaction       %d:\n",i+1)
if              signatures               :=txInfo.GetSignatures();len(signatures) log.Printf("           Signature:%s\n",base58.Encode(signatu
2
if      meta      :=tx.GetMeta();meta      !=nil      {
log.Printf(" Status:%v\n",meta.GetErr()==nil) log.Printf("           Fee:%d             lamports\n",meta.GetFee())
¡¡¡¡¡¡} ×Ó
¡¡¡¡¡¡} ×Ó

if        rewards         :=block.GetRewards();rewards         !=nil          {
if      rewardList       :=rewards.GetRewards();len(rewardList)>0{
log.Printf("\n===Block          Rewards           ===\n") for  _,reward   :=range  rewardList   {
pubkey             :=[]byte(reward.GetPubkey())
log.Printf("   Account:%s\n",base58.Encode(pubkey)) log.Printf("           Lamports:%d\n",reward.GetLamports())
log.Printf(" Post Balance:%d\n",reward.GetPostBalance( log.Printf("           Reward           Type:%d\n",reward.GetRewardType()) log.Printf("           Commission:%d\n",reward.GetCommission())
log.Printf("  ---\n")
}
×Ó
×Ó
log.Printf("\n%s\n",strings.Repeat("=",50))
}
func          handleSlotUpdate(slot          *pb.SubscribeUpdateSlot){ log.Printf("\n===Slot  Update  ===\n")

2025/2/2701:22                                                                                                           Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡
Enhanced Websockets(beta)
Stream real-time transaction and account updates directly to your applications with our enhanced    websocket     integration.



What are Enhanced Websockets?

Helius   provides   Geyser-enhanced  WebSockets   in  addition  to   Solana's  standard  WebSocket methods.These   enhanced  WebSockets   offer  faster   response   times   than   traditional   RPC
WebSockets.We support two key subscription methods: transactionSubscribe      and 	accountSubscribe .

¡¡¡¡¡¡¡¡

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs




Subscription Endpoints

Geyser-enhanced websockets are currently available on  mainnet  and   devnet  with  the following URLs

Mainnet: wss://atlas-mainnet.helius-rpc.com/?api-key=<API           KEY>

Devnet: wss://atlas-devnet.helius-rpc.com/?api-key=<API            KEY>

¡¡¡¡¡¡¡¡



Transaction Subscribe

The transactionSubscribe websocket method enables real-time transaction events.To use
¡¡it,provide  a     TransactionSubscribeFilter     and optionally include 	TransactionSubscribeOptions     for further customization.


TransactionSubscribeFilter

	vote :Aboolean flag to include/exclude vote-related transactions.

	failed    :Aboolean flag to include/exclude transactions that failed.

signature   :Filters updates to a specific transaction based on its signature.

accountInclude   :A list of accounts for which you want to receive transaction updates.
This means that only one of the accounts must be included in the transaction updates(e.g., Account 1OR Account 2).

accountExclude      :A   list  of  accounts  you  want  to   exclude  from  transaction   updates.

2025/2/2701:22                                                                             Helius Docs


¡¡accountRequired:   Transactions must involve these specified accounts to be included in updates.This means that allof the accounts must be included in the transaction updates   (e.g.,Account 1AND Account 2).

¡¡¡¡¡¡¡¡


TransactionSubscribeOptions(Optional)

¡¡commitment :Specifies the commitment level for fetching data,dictating at what stage of the transaction lifecycle updates are sent.The possible values are processed,confirmed    and finalized

encoding  :Sets  the  encoding  format  of  the  returned  transaction  data.The  possible  values
are base58,base64 and jsonParsed

¡¡transactionDetails|      :Determines the level of detail for the returned transaction data. The possible values are full,signatures,accounts and none

¡¡showRewards :A  boolean flag  indicating  if reward data should  be  included  in  the transaction    updates.

¡¡maxSupportedTransactionVersion         :Specifies  the  highest  version  of transactions  you want to  receive  updates.To  get Versioned  Transactions,set the value to  1.

¡¡¡¡¡¡¡¡


Transaction Subscribe Example

¡Ì  Example Payload


2025/2/2701:22                                                                                               Helius Docs


5
"jsonrpc":"2.0", "id":420,
"method":"transactionSubscribe", "params":[
"vote":false,  "failed":false,
"signature":"2dd5zTLrSs2udfNsegFRCnzSyQcPrM9svX6m1UbEM! "accountInclude":["pqx3fvvh6b2eZBfLhTtQ5KxzU3CginmgGTml
"accountExclude":["FbfwE8ZmVdwUbbEXdq4ofhuUEiAxeSk5kao' "accountRequired":["As1XYY9RdGkjs62isDhLKG3yxMCMatnban]
×Ó£¬
{
"commitment":"processed",
"encoding":"base64",
"transactionDetails":"full", "showRewards":true,
¡¡¡¡"maxSupportedTransactionVersion":0 ×Ó
¡¡¡¡] ×Ó
¡Ì Example     Notifications








5























































2



"jsonrpc":"2.0",
"method":"transactionNotification",
"params":{
"subscription":4743323479349712, "result":{
"transaction":{
"transaction":[
"Ae6zfSExLsJ/E1+q0jI+3ueAtSoW+6HnuDohmuFwagl "base64"
],
"meta":S
"err":null,
"status":{
"Ok":null
×Ó£¬
"fee":5000,
"preBalances":[
28279852264, 158122684,
¡¡¡¡¡¡1 ],
"postBalances":[  28279747264, 158222684,
¡¡¡¡¡¡1 ],
"innerInstructions":[], "logMessages":[
"Program 111111111111111111111111111111: "Program 111111111111111111111111111111:
],
"preTokenBalances":[],  "postTokenBalances":[],
"rewards":null,
"loadedAddresses":{
"writable":[],
¡¡¡¡¡¡"readonly":[] ×Ó£¬
"computeUnitsConsumed":0
¡¡¡¡¡¡} ×Ó£¬
"signature":"5moMXe6VW7L7aQZskcAkKGQ1y19qqUT1teQKBI "slot":224341380
¡¡¡¡¡¡×Ó ×Ó

2025/2/2701:22                                                                                               Helius Docs






¡ÌCode    Example

In this example,we are subscribing to transactions that contain the Raydium account                 675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8 .
Whenever a transaction occurs that contains
¡¡675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8  in  the  accountKeys   of the transaction,we will receive a websocket notification.
Based on the subscription options,the transaction notification will be sent at  the   processed  commitment   level, jsonParsed  encoding,   full      transaction details,and will show rewards.


2025/2/2701:22                                                                                               Helius Docs



const      WebSocket       =require('ws');

//Create    a    WebSocket    connection
const       ws       =new       WebSocket('wss://atlas-mainnet.helius-rpc.com/?ap
//Function   to    send   a    request   to    the   WebSocket    server function         sendRequest(ws){
const     request     ={ jsonrpc:"2.0",
id:420,
method:"transactionSubscribe", params:[
{
¡¡¡¡¡¡accountInclude:["675kPX9MHTjS2zt1qfr1NYHuzeLXf( ×Ó£¬
{
commitment:"processed",
encoding:"jsonParsed",
transactionDetails:"full", showRewards:true,
¡¡¡¡¡¡maxSupportedTransactionVersion:0 ×Ó
¡¡¡¡¡¡] ×Ó£»
¡¡¡¡¡¡ws.send(JSON.stringify(request)); }
//Function   to   send   a    ping   to   the   WebSocket   server function            startPing(ws){
setInterval(()=>{
if(ws.readyState              ===WebSocket.0PEN){
ws.ping();
console.log('Ping            sent');
×Ó
¡¡¡¡¡¡×Ó£¬30000);// Ping  every  30  seconds ×Ó
//Define    WebSocket     event    handlers
ws.on('open',function     open(){
console.log('WebSocket      is      open');
sendRequest(ws);       //Send   a   request   once   the   WebSocket   is   o
startPing(ws);             //Start      sending      pings
×Ó);
ws.on('message',function   incoming(data){
const          messageStr          =data.toString('utf8'); trv  5

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡



Account Subscribe

Solana's  Websockets  supports  a  method  that  allows  you  to  subscribe  to  an  account  and
receive notifications via the websocket connection whenever there are changes to the
lamports  or  data  associated  with  amatching  account  public  key.This  method  aligns  directly with the Solana Websocket APl specification.



Parameters

string   :The account public key,sent in base58 format(required). object  :An optional object used to pass additional parameters.
¡ñ [encoding :Specifies the format for data returned in the AccountNotification.
Supported values:base58,base64,base64+zstd,jsonParsed(default is base58).
¡ñ commitment   :Defines   the    commitment   level    for   the    transaction.Supported    values: finalized,confirmed,processed(default is finalized).


Account Subscribe Example

2025/2/2701:22                                                                                               Helius Docs



¡Ì Example  Payload
¡¡¡¡¡¡


¡Ì Example  Notification
S
'jsonrpc':'2.0',
'method':'accountNotification', 'params':
{
'subscription':237508762798666, 'result':
{
'context':{'slot':235781083}, 'value':
{
'lamports':1169280,
'data':'BvEhEb6hixL3QPn41gHcyi2CDGKt381jbNKFFCQr6) 'owner':'Sysvar1111111111111111111111111111111111:
'executable':False, 'rentEpoch':361,
'space':40
¡¡¡¡2 ×Ó
2
×Ó

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs


In this example,we are subscribing to account changes for the account SysvarC1ock11111111111111111111111111111111 .

We will see an update whenever a change occurs to the account data or the lamports for this account.
This happens at a frequent interval for this specific account as the   slot    and
unixTimestamp    are both a part of the returned account data.

2025/2/2701:22                                                                             Helius Docs



//Create a WebSocket connection
const         ws         =new         WebSocket('wss://atlas-mainnet.helius-rpc.com?ap:
//Function    to    send    a    request    to    the    WebSocket    server function           sendRequest(ws){
const      request      ={ jsonrpc:"2.0",  id:420,
method:"accountSubscribe",
params:[
¡¡"SysvarClock11111111111111111111111111111111",//pi S
encoding:"jsonParsed",//base58,base64,base
¡¡¡¡¡¡commitment:"confirmed",//defaults               to               finaliz ×Ó
¡¡¡¡¡¡] ×Ó£»
¡¡¡¡¡¡ws.send(JSON.stringify(request)); ×Ó
//Function   to    send    a    ping    to    the    WebSocket    server function       startPing(ws){
setInterval(()=>{
if(ws.readyState    ===WebSocket.OPEN){ ws.ping();
console.log('Ping      sent');
×Ó
¡¡¡¡¡¡×Ó£¬30000);// Ping every 30 seconds ×Ó
//Define     WebSocket     event     handlers
ws.on('open',function         open(){
console.log('WebSocket        is        open');
sendRequest(ws);        //Send    a    request    once   the    WebSocket    is    o
startPing(ws);         //Start    sending    pings
×Ó);
ws.on('message',function        incoming(data){
const            messageStr           =data.toString('utf8');
try   {
const             messageObj=JSON.parse(messageStr); console.log('Received:',messageObj);
×Ó catch(e){
console.error('Failed      to      parse      JSON:',e);
2
×Ó);

2025/2/2701:22                                                                                                             Helius Docs


ws.on('error',function            error(err){
console.error('WebSocket                              error:',err);
×Ó);
ws.on('close',function     close(){
console.log('WebSocket         is         closed');
×Ó);


2025/2/2701:22                                                                                 Helius Docs


Webhooks
Setup powerful event-driven workflows in seconds.

Helius  Webhooks   enable  seamless  monitoring  of  Solana   on-chain  events,such  as  sales,    listings,swaps,and    more.We    offer    a    user-friendly    interface,programmatic    API,and    SDK access  for  easily  creating  and  managing  webhooks.

For a detailed list of supported events,please refer to our documentation.

¡¡¡¡¡¡¡¡



Types of Webhooks

We currently offer several types of webhooks tailored to different needs:

¡¤   Enhanced Transaction Webhooks:Provide human-readable,parsed data for specific transaction types(e.g.,NFT sales)related to the addresses you monitor.This is ideal if you want filtered,actionable insights.
¡ñ Raw Transaction Webhooks:This option delivers raw transaction data for all  transactions involving the addresses you monitor.It does not allow filtering by transaction type.
¡ñ Discord Webhooks:Stream updates for specific transaction types directly to a
designated  Discord  channel  as  formatted  messages.To  use  this  option,you  must  submit your   Discord   Webhook   URL.

¡¡¡¡¡¡¡¡



Event Payload Example

¡¡¡¡¡¡¡¡

¡Ì Enhanced

2025/2/2701:22                                                                             Helius Docs



[
×Ó
"accountData":[ 5
"account":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEuXa6sz9Wq) "nativeBalanceChange":-72938049280,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"NTYeYJ1wr4bpM5x06zx5En44SvJFAd35zTxxNoERYqd "nativeBalanceChange":0,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"AAaTGaA3uVqikfVEwoSG7EwkCb4bBDsMEyueiVUS5Cal
"nativeBalanceChange":0,
"tokenBalanceChanges":[]
×Ó£¬ {
"account":"autMW8SgBkVYeBgqYiTuJZnkvDZMVU2MHJh9Jh7CSQ2 "nativeBalanceChange":0,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"D8TxfGwdu9MiNMoJmUoC9wQfNfNT7Lnm6DzifQHRTy6 "nativeBalanceChange":0,
"tokenBalanceChanges":[]
×Ó£¬
{
"account":"5DxD5ViWjvRZEkxQEaJHZw2sBsso6xoXx3wGFNKgXUz "nativeBalanceChange":71860273440,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"25DTUAd1roBFoUQaxJQByL6Qy2cKQCBp4bK9sgfy9Uil "nativeBalanceChange":-2039280,
"tokenBalanceChanges":[ Ö®
"mint":"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzY
"rawTokenAmount":{ "decimals":0,
"tokenAmount":"-1"
×Ó£¬
"tokenAccount":"25DTUAd1roBFoUQaxJQByL6Qy2cKQCBp4b "userAccount":"1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvl
¡¡¡¡} ]
×Ó





"account":"DTYuh7gAGGZg2okM7hdFfU1yMY9LUemCiPyD5Z5GCs6 "nativeBalanceChange":2039280,
"tokenBalanceChanges":[ {
"mint":"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzY "rawTokenAmount":S
"decimals":0,
"tokenAmount":"1"
×Ó£¬
"tokenAccount":"DTYuh7gAGGZg2okM7hdFfU1yMY9LUemCiP! "userAccount":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEu)
¡¡¡¡×Ó ]
×Ó£¬
{
"account":"rFqFJ9g7TGBD8Ed7TPDnvGKZ5pWLPDyxLcvcH2eRCtt "nativeBalanceChange":1080000000,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"CgXS5¡ÁC3qAGSg9txD9bS7BUgugZwshivGXpCJcGmdwr(
"nativeBalanceChange":-2234160, "tokenBalanceChanges":[]
×Ó£¬ {
"account":"M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K "nativeBalanceChange":0,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"E8cU1WiRWjanGxmn96ewBgk9vPTcL6AEZ1t6F6fkgUWe "nativeBalanceChange":0,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"11111111111111111111111111111111", "nativeBalanceChange":0,
"tokenBalanceChanges":[]
}, 5
"account":"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzYqi "nativeBalanceChange":0,
¡¡¡¡"tokenBalanceChanges":[] ×Ó£¬
{
"account":"AYZsWahcrSnkwqbA1ji7wEzgAnGjLNJhVUMDPfACECZ: "nativeBalanceChange":0,



"tokenBalanceChanges":[]
×Ó£¬ {
"account":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' "nativeBalanceChange":0,
"tokenBalanceChanges":[]
×Ó£¬
{
"account":"SysvarRent111111111111111111111111111111111 "nativeBalanceChange":0,
"tokenBalanceChanges":[]
×Ó£¬
{
"account":"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knl "nativeBalanceChange":0,
"tokenBalanceChanges":[]
×Ó£¬ {
"account":"1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvW1X6NDix "nativeBalanceChange":0,
"tokenBalanceChanges":[]
¡¡¡¡×Ó ],
"description":"5DxD5ViWjvRZEkxQEaJHZw2sBsso6xoXx3wGFNKgXUzh "events":{
"nft":S
"amount":72000000000,
"buyer":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEuXa6sz9WqX" "description":"5DxD5ViWjvRZEkxQEaJHZw2sBsso6xoXx3wGFNK
"fee":10000,
"feePayer":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEuXa6sz9W
"nfts":[ {
¡¡"mint":"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzY "tokenStandard":"NonFungible"
¡¡¡¡} ],
"saleType":"INSTANT_SALE",
"seller":"5DxD5ViWjvRZEkxQEaJHZw2sBsso6xoXx3wGFNKgXUzE
"signature":"5nNtjezQMYBHvgSQmoRmJPiXGsPAWmJPoGSa64xan "slot":171942732,
"source":"MAGIC_EDEN",
"staker":"",
"timestamp":1673445241, "type":"NFT_SALE"
¡¡¡¡×Ó ×Ó£¬
"fee":10000,



"feePayer":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEuXa6sz9WqX", "nativeTransfers":[
{
"amount":72936000000,
"fromUserAccount":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEu) "toUserAccount":"AAaTGaA3uVqikfVEwoSG7EwkCb4bBDsMEyuei
×Ó£¬ {
"amount":2011440,
"fromUserAccount":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEu)
¡¡¡¡"toUserAccount":"D8TxfGwdu9MiNMoJmUoC9wQfNfNT7Lnm6Dzif( ×Ó£¬
{
"amount":71856000000,
"fromUserAccount":"AAaTGaA3uVqikfVEwoSG7EwkCb4bBDsMEyue
¡¡¡¡"toUserAccount":"5DxD5ViWjvRZEkxQEaJHZw2sBsso6xoXx3wGFI ×Ó£¬
{
"amount":1080000000,
"fromUserAccount":"AAaTGaA3uVqikfVEwoSG7EwkCb4bBDSMEyu
¡¡¡¡"toUserAccount":"rFqFJ9g7TGBD8Ed7TPDnvGKZ5pWLPDyxLcvCH ×Ó£¬
{
"amount":2039280,
"fromUserAccount":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEu) "toUserAccount":"DTYuh7gAGGZg2okM7hdFfU1yMY9LUemCiPyD5
¡¡¡¡×Ó ],
"signature":"5nNtjezQMYBHvgSQmoRmJPiXGsPAWmJPoGSa64xanqrau "slot":171942732,
"source":"MAGIC_EDEN", "timestamp":1673445241,
"tokenTransfers":[
{
"fromTokenAccount":"25DTUAd1roBFoUQaxJQByL6Qy2cKQCBp4b
"fromUserAccount":"1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvl
"mint":"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzYqu", "toTokenAccount":"DTYuh7gAGGZg2okM7hdFfU1yMY9LUemCiPyD!   "toUserAccount":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEuXa
"tokenAmount":1,
"tokenStandard":"NonFungible"
¡¡¡¡} ],
"type":"NFT_SALE"
¡¡¡¡×Ó ]





¡Ì   Raw




7
{
¡¡"blockTime":1673445241, "indexWithinBlock":2557,  "meta":{
"err":null,
"fee":10000,
"innerInstructions":[
{
"index":0,
"instructions":[
S
"accounts":[
0,
2
],
"data":"3Bxs3zs3x6pg4XWo",
"programIdIndex":12
}
¡¡¡¡] },
5
"index":1,
"instructions":[
{
"accounts":[
0,
4
],
"data":"11112nba6qLH4BKL4MW8GP9ayKApZeYn3LQKJdPde
"programIdIndex":12
¡¡¡¡} ]
,
{
"index":2,
"instructions":[
S
"accounts":[
2,
5
],
"data":"3Bxs3zx1470WJQej",
¡¡¡¡"programIdIndex":12 ×Ó£¬
S
"accounts":[
2.

2025/2/2701:22                                                                                                          Helius Docs



8
],
"data":"3Bxs3zwT1TGLhiT9",
"programIdIndex" :  12
×Ó£¬ {
"accounts":[
0,
7,
0,
13,
12,
15
],
"data":"1",
"programIdIndex" :  17
¡¡×Ó£¬ 5
"accounts":[
13
],
"data":"84eT",
"programIdIndex"   :   15
}, {
"accounts":[
0,
7
],
"data":"11119os1e9qSs2u7TsThXqkBSRVFxhmYaFKFZ1wal "programIdIndex" :  12
×Ó£¬
5
"accounts" :[
7
],
"data":"P",
"programIdIndex"   :  15
×Ó£¬ {
"accounts":[
7,
13
],
"data":"6YTZgAHgNKVRJ2mAHQUYC1DgXF6dPCgbSWA5P4gZ "programIdIndex"   :   15
}, {

2025/2/2701:22                                                                                                                          Helius Docs


"accounts":[
6,
7,
18
],
"data":"3DdGGhkhJbjm", "programIdIndex"    :  15
×Ó£¬
S
"accounts":[
6,
5,
18
],
"data":"A",
"programIdIndex"    :   15
2
¡¡¡¡] ×Ó
],
"loadedAddresses":{ "readonly":[],
"writable":[]
×Ó£¬
"logMessages"  :[
"Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K in

"Program   log:Instruction:Deposit",
"Program       11111111111111111111111111111111   "Program         11111111111111111111111111111111



invoke       [2]", success",

"Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K col "Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K su "Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K in "Program  log:Instruction:Buy",
"Program       11111111111111111111111111111111       invoke       [2]",
"Program         11111111111111111111111111111111         success",
"Program                              log:{\"price\":72000000000,\"buyer_expiry\":0 "Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K col "Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K su "Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K in "Program                        log:Instruction:ExecuteSaleV2",
"Program       11111111111111111111111111111111       invoke       [2]",
"Program         11111111111111111111111111111111         success",
"Program       11111111111111111111111111111111       invoke       [2]",
"Program         11111111111111111111111111111111         success",
"Program ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL i "Program         log:Create",
"Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA in "Program                          log:Instruction:GetAccountDataSize",

2025/2/2701:22                                                                                                             Helius Docs


"Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA col "Program   return:TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623 "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA suC "Program       11111111111111111111111111111111       invoke       [3]",
"Program         11111111111111111111111111111111         success",
"Program   log:Initialize   the   associated   token   account",  "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA in "Program       log:Instruction:InitializeImmutableOwner",
"Program   log:Please   upgrade   to   SPL   Token   2022   for   immu "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA col "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA suC "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA in "Program     log:Instruction:InitializeAccount3",
"Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA col "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA suC "Program ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNSLJA8knL c "Program ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNSLJA8knL si "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA in "Program   log:Instruction:Transfer",
"Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA col "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA su "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA in "Program     log:Instruction:CloseAccount",
"Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA col "Program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA su "Program                                log:{\"price\":72000000000,\"seller_expiry\":  "Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K col "Program M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K su
],
"postBalances":[
371980779080,
0,
0,
100129388687,
0,
81872924494,
0,
2039280,
993583055919,
0,
1141440,
3654000,
1,
1461600,
5616720,
934087680,
1009200,
731913600,

2025/2/2701:22                                                                                                    Helius Docs


457953014766
],
"postTokenBalances":[
{
"accountIndex"  :  7 ,
"mint":"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzYqu "owner":"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEuXa6sz9Wq)
"programId":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VC
"uiTokenAmount" :{
"amount":"1",
"decimals"  :  0 ,
"uiAmount" :   1 ,
"uiAmountString":"1"
}
¡¡¡¡×Ó ],
"preBalances"     :[
444918828360,
0,
0,
100129388687,
0,
10012651054,
2039280,
0,
992503055919,
2234160,
1141440,
3654000,
1,
1461600,
5616720,
934087680,
1009200,
731913600,
457953014766
],
"preTokenBalances":[
{
"accountIndex"  :  6,
"mint":"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzYqu' "owner":"1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvW1X6NDix
"programId":"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623V
"uiTokenAmount" :{
"amount":"1",
"decimals"  :  0 ,
"uiAmount" :  1 ,
"uiAmountString":"1"

2025/2/2701:22                                                                                     Helius Docs


5
¡¡¡¡×Ó ],
"rewards":[]
×Ó£¬
"slot"    :   171942732 ,
"transaction":{  "message":{
"accountKeys":[
"CKs1E69a2e9TmH4mKKLrXFF8kD3ZnwKjoEuXa6sz9WqX",
"NTYeYJ1wr4bpM5x06zx5En44SvJFAd35zTx¡ÁNoERYqd", "AAaTGaA3uVqikfVEwoSG7EwkCb4bBDsMEyueiVUS5CaU",
"autMW8SgBkVYeBgqYiTuJZnkvDZMVU2MHJh9Jh7CSQ2",
"D8TxfGwdu9MiNMoJmUoC9wQfNfNT7Lnm6DzifQHRTy6B",
"5DxD5ViWjvRZEkxQEaJHZw2sBsso6xoXx3wGFNKgXUzE",
"25DTUAd1roBFoUQaxJQByL6Qy2cKQCBp4bK9sgfy9UiM",
"DTYuh7gAGGZg2okM7hdFfU1yMY9LUemCiPyD5Z5GCs6Z",
"rFqFJ9g7TGBD8Ed7TPDnvGKZ5pWLPDyxLcvcH2eRCtt",
"CgXS5xC3qAGSg9txD9bS7BUgugZwshivGXpCJcGmdwrd",
"M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K",
"E8cU1WiRWjanGxmn96ewBgk9vPTcL6AEZ1t6F6fkgUWe",
"11111111111111111111111111111111",
"FdsNQE5EeCe57tbEYCRV1JwW5dzNCof7MUTaGWhmzYqu",
"AYZsWahcrSnkwqbA1ji7wEzgAnGjLNJhVUMDPfACECZf", "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
"SysvarRent111111111111111111111111111111111",  "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNSLJA8knL", "1BWutmTvYPwDtmw9abTkS4Ssr8no61spGAvW1X6NDix"
],
"addressTableLookups"  :  null  , "header":{
"numReadonlySignedAccounts" :  1 ,
"numReadonlyUnsignedAccounts":  9 , "numRequiredSignatures"  :  2
"instructions":[
{
"accounts"  :[
0,
1,
2,
3,
11,
12
],
"data":"3GyWrkssW12wSfxjTynBnbif", "programIdIndex"  :  10
×Ó£¬
c

2025/2/2701:22                                                                                          Helius Docs


2
"accounts":[
0,
1,
13,
14,
2,
3,
11 ,
4,
3,
15,
12,
16
],
"data":"3Jmjmsq2jyrch5iz612vBLZCRB498owPe7qezQVetR "programIdIndex":  10
×Ó£¬ {
"accounts":[
0,
5,
1,
6,
13,
14,
2,
7,
3,
11,
8,
4,
3,
9,
3,
15,
12,
17,
18,
16
],
"data":"B2rqPwAgvj3t35y6HpdumfhdhsZMLNFLmXMC9Uz2HX "programIdIndex":  10
¡¡¡¡×Ó ],
"recentBlockhash":"3NRncb7FJuDruQjMDxnHvJBQkvkHa7KSUBql
×Ó£¬
"signatures":[
"5nNtio?OMYRHvoSOmoRm1PiXGcPAWm?PoGSa64¡ÁanaraunoiV7FvGNl

2025/2/2701:22                                                                                               Helius Docs


j              5~                               u~u-^Wy-u~s¡Â                   yu
"4dWBkbLHGVU2jw9Sjj6YETtKfaVKAAN1M8aWzXRNC4aHBckUzM73n3F
]
¡¡¡¡×Ó ×Ó
]





Quick  Start

We  provide  three  convenient  methods  to  create,edit,and  manage  webhooks  on  Helius.



Via Helius Dashboard

The  Helius  Ulis  perfect  if  you  prefer  a  no-code  solution  with  additional  features  like
viewing logs and sending test webhook events.You can access it directly through our
Dashboard .You can add up to 25 addresses via the Dashboard.To monitor more than 25 addresses,you can use our APl or SDK.

2025/2/2701:22                                                                                                    Helius Docs









o0

yo

ng

lee  we






















Configure Webhook Network  ¢Ú
¡ò  mainnet   O   devnet Webhook Type ¢Ú
enhanced
Select the type of webhook you wish to receive.
Transaction Type(s)
ADD_LIQUIDITY  x  SWAP  x
Select the type(s)of transactions to  capture.Select  "Any"if  interested  in  all  transactions.

Webhook URL*
https://example.webhook.com
Enter the URL of your webhook.This could be a lambda,a custom APl endpoint,etc.

Authentication Header

¡¡
Enter an authentication header to pass into the post requests to your webhook.
Account Addresses ¢Ú
6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P
1address added



	
Cancel	Confirm
	


Configuring a Webhook



Via Helius API

If  you're  not  working  with  Typescript  or  Javascript,you'll  need  to  interact  with  our webhooks through  REST API:

 API  Reference                                                                                                                >

2025/2/2701:22                                                                                               Helius Docs




Via Helius SDK

The easiest-and most enjoyable-way to interact with Helius webhooks is through our official SDKs.We currently offer SDKs for TypeScript and Rust.

GitHub-helius-labs/helius-sdk
>
GitHub

GitHub-helius-labs/helius-rust-sdk:Asynchronous Helius Rust SDK
GitHub	
>

The SDKs provide powerful abstractions that enhance the functionality of webhooks,
including the ability to create collection webhooks that effortlessly track all NFTs within a specifc NFT collection!



Example Uses

¡ñ Bots
o When an NFT is listed on marketplace X,trigger an "NFT buy"action.
o When amargin position is unhealthy,trigger a "liquidation"action.
Monitoring&Alerts
o When a program emits a certain log,it triggers PagerDuty integration.
o When a token account balance changes by more than X%,use Dialect to communicate a warning action.
Event-driven Indexing
¡£When any transaction occurs for agiven program,send it directly to your database or backend.
Notifications &Activity Tracking
¡£When transferring from walletXto walletY-send a Slack  notification or email.
Analytics&Logs

2025/2/2701:22                                                                                               Helius Docs


o When event Xhappens,send it to an ETL pipeline or persist it directly on Helius to view trends over time.
¡¤   Workflow Automation
o When event Xhappens,trigger any set of actions.

2025/2/2701:22                                                                                               Helius Docs



API Reference
Learn how to use Helius webhooks.

For any questions or help regarding our Webhooks,please ask us for help on Discord !

¡¡¡¡¡¡¡¡


(NEW)Helius Mock Server for Local Webhook Testing


Endpoints


Create  Webhook	>


Get All Webhooks	>

Get Webhook	>


Edit  Webhook	>


Delete Webhook	>


2025/2/2701:22                                                                                 Helius Docs


Create Webhook
Programatically   create   a   Helius   webhook.



POST/webhooks

Creates a webhook with specified account addresses,transaction types,and a webhook
URL.Optionally,you can include an authorization header to verify that the webhook
originated from Helius.For a full list of supported transaction types,please see Transaction Types

¡¡¡¡¡¡¡¡



Creates a webhook.

¡¡	
/vO/webhooks	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


> Authorizations
¡¡¡¡¡¡¡¡


Query parameters
¡¡¡¡¡¡¡¡
api-key      string    required
The            .



Body

webhookURL      string
webhookType  string
authHeader    string
txnStatus   string¡¤enum

2025/2/2701:22                                                                                          Helius Docs


Options:  all,success,failed

transactionTypes     string¡¤enum[]
+Show child attributes
accountAddresses     string[]



Responses
>200   The   created   webhook.
¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                             Helius Docs


¡¡¡¡¡¡¡¡







Code Examples

¡Ì Enhanced   Transactions   Payload
5







×Ó	
"webhookURL":"https://TestServer.test.repl.co/webhooks", "transactionTypes":["NFT_SALE"],
//Use      ["ACCOUNT_ADDRESS","ACCOUNT_ADDRESS"]for      multiple
"accountAddresses":["ACCOUNT_ADDRESS"],  "webhookType":"enhanced",//"enhancedDevnet" "authHeader":"<0ptional_AuthHeader>"
¡Ì Raw Transactions  Payload


2025/2/2701:22                                                                                               Helius Docs


5








×Ó	
"webhookURL":"https://TestServer.test.repl.co/webhooks", "transactionTypes":["Any"],
//Use   ["ACCOUNT_ADDRESS","ACCOUNT_ADDRESS"]for    multiple "accountAddresses":["ACCOUNT_ADDRESS"],
"webhookType":"raw",//"rawDevnet" "txnStatus":"all",//success/failed
"authHeader":"<0ptional_AuthHeader>"

¡Ì Discord    Transactions
{






}	
"webhookURL":"https://discord.com/api/webhooks/<WebhookID "transactionTypes":["NFT_SALE"],
//Use   ["ACCOUNT_ADDRESS","ACCOUNT_ADDRESS"]for    multiple
"accountAddresses":["ACCOUNT_ADDRESS"], "webhookType":"discord"//"discordDevnet"
¡ÌJavascript  Code  Example


2025/2/2701:22                                                                                 Helius Docs


const           createWebhook           =async()=>{
try    {
const   response   =await   fetch(
"https://api.helius.xyz/v0/webhooks?api-key=<PASTE                      YOUR
{
method:'POST', headers:{
¡¡¡¡'Content-Type':'application/json', ×Ó£¬
body:JSON.stringify({
"webhookURL":"https://TestServer.test.repl.co/webhool "transactionTypes":["Any"],
"accountAddresses":["2PP32Vmuzgo1UC847Yzdd9CkowXWhML: "webhookType":"raw",//"rawDevnet"
¡¡¡¡"txnStatus":"all",//success/failed ×Ó),
×Ó
);
const    data    =await    response.json(); console.log({data         });
×Ó catch(e)S
console.error("error",e);
¡¡¡¡×Ó };
createWebhook();



Testing Environments

Here are some testing environments that are quick to set up for posting webhook events:
¡¡¡¡¡¡¡¡
Copy    URL    to    use    in    payload
   TypedWebhook.tools:a  tool  to  test  webhooks   and   generate   payload   types         >
¡¡¡¡¡¡¡¡
Copy URL to use in payload

2025/2/2701:22                                                                                     Helius Docs


Get All Webhooks
Programatically retrieve all your Helius webhooks.

¡¡¡¡¡¡¡¡



GET/webhooks


Returns all webhooks.

¡¡	
/v0/webhooks	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


>Authorizations



Query     parameters

api-key     string       required
The api key.



Responses

>   200   Webhooks for the given APlkey.
>400   Invalid   request.
>401    Unauthorized   request.
>403  Request  was  forbidden.
>404 The specifed resource was not found.
>429  Exceeded  rate  limit.
>500 The server encountered an unexpected condition that prevented it from fulflling the request.

2025/2/2701:22                                                                                 Helius Docs



¡¡¡¡¡¡¡¡







Code Example

2025/2/2701:22                                                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


Get Webhook
Returns  a  webhook  config  given  a  webhook  ID



GET/webhooks/:webhookID


Returns given Webhook.

Query a webhook by its ID.


¡¡	/v0/webhooks/     {webhookID}	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


>Authorizations



Path parameters
webhookID    string
The webhook ID.



Query   parameters	required
api-key     string      required
The api key.



Responses
>   200   Returns details about the given webhook ID.


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


¡¡¡¡¡¡¡¡







Code Example

2025/2/2701:22                                                                                                             Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


Edit Webhook
Programatically   edit   a   Helius   webhook.

¡¡¡¡¡¡¡¡



PUT/webhooks/:webhookID



Edits a webhook.

¡¡	/v0/webhooks/     SwebhookID}	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


> Authorizations



Path parameters
webhookID  string
The webhook ID.



Query parameters	required
api-key     string      required
The api key.



Body

webhookURL      string
webhookType      string
authHeader    string
txnStatus   string¡¤enum

2025/2/2701:22                                                                                     Helius Docs



Options: all,success,failed

transactionTypes	string¡¤enum[]
+Show  child  attributes	
accountAddresses string[]



Responses

>   200 The edited webhook.
>400   Invalid   request.
>401   Unauthorized   request.
>403  Request  was  forbidden.
>404 The specifed resource was not found.
>429  Exceeded  rate  limit.
>500 The server encountered an unexpected condition that prevented it from fulflling the request.


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                 Helius Docs


200  400  401  403  404  429  500

{
"webhookID":  "text"  , "wallet":    "text"  ,
"webhookURL":     "text"   "webhookType":      "text" "authHeader":  "text" "txnStatus":    "all"   ,
"transactionTypes":[
"UNKNOWN"
],
"accountAddresses":[
"text"
¡¡¡¡] ×Ó
The edited webhook.






Code Example

2025/2/2701:22                                                                                 Helius Docs


¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                          Helius Docs


Delete Webhook
Programatically delete a Helius webhook.



DELETE/webhooks/:webhookID


Deletes a webhook.

DELETE      /v0/webhooks/{webhookID}	¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡


> Authorizations



Path parameters
webhookID  string   required
The  webhook  ID.



Query parameters
api-key         string      required
The api key.



Responses
200   No  content.

>   400   Invalid  request.
>401     Unauthorized     request.
>403   Request   was   forbidden.
>404  The  specifed  resource  was  not  found.

>429   Exceeded   rate   limit.

2025/2/2701:22                                                                                 Helius Docs



>   500   The server encountered an unexpected condition that prevented it from fulflling the request.


¡¡¡¡¡¡¡¡

200  400  401  403  404  429  500


No   body


No content.







Code Example

¡¡¡¡¡¡¡¡

2025/2/2701:22                                                                                               Helius Docs



¡¡¡¡¡¡¡¡
Have a question about Helius webhooks?


What is the retry policy for webhooks?

Currently,we resend unacknowledged webhook events once per minute for three minutes. We also offer customizable retry policies for enterprise plans.


When does the Webhook send a notification?

Webhooks notify as soon as a transaction is confirmed.



What is the difference between"raw"and "enhanced" webhooks?
Raw webhooks are regular Solana transactions.When a transaction occurs for the given  addresses in a raw webhook,those transactions willbe directly sent to the webhook URL supplied by the user.

Enhanced webhooks are for Helius'interpreted transaction types.We parse over 100 types of Solana transactions,including  NFT  listings,DeFi  swaps,Solana transfers,etc.,and
abstract these into our own schema.If you want to listen for any transaction and don't want Helius abstractions,use  raw webhooks.If you want  built-in transaction type  detection,use
enhanced webhooks.


Are webhooks available on Devnet?

Yes!


How many addresses can linput for 1 webhook?

2025/2/2701:22                                                                                               Helius Docs


Up to 100,000 addresses.


How can l verify that the webhook came from Helius?

You can specify an authorization  header when creating(or updating)awebhook.Helius will include set the value in the    Authorization     header when sending data to your webhook.


Can linput"localhost"for my webhook URL?

No!This is a very common mistake.We can not detect your own local servers from just "localhost."


Can Imonitor an entire NFT collection?

Yes,you can!See the Helius SDK for a code example.


Do webhooks post failed transactions?

It depends on the type.Enhanced webhooks do not,but raw webhooks do!






Solana APls